{
  "definitions": {
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Analytics": {
      "description": "Analytics is a struct that represents the analytics server and the requests that should be sent to it. This information is sent to Loft instances when they check in with the license server.",
      "properties": {
        "endpoint": {
          "description": "Endpoint is the endpoint for the analytics server.",
          "type": "string"
        },
        "requests": {
          "description": "Requests is a slice of requested resources to return analytics for.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Request"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Announcement": {
      "description": "Announcement contains an announcement that should be shown within the Loft instance. This information is sent to Loft instances when they check in with the license server.",
      "properties": {
        "body": {
          "description": "Body contains the main message of the announcement in HTML format.",
          "type": "string"
        },
        "buttons": {
          "description": "Buttons to show alongside the announcement",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Button"
          },
          "type": "array"
        },
        "name": {
          "description": "Name contains the resource name of the announcement",
          "type": "string"
        },
        "title": {
          "description": "Title contains the title of the announcement in HTML format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.BlockRequest": {
      "description": "BlockRequest tells the instance to block certain requests due to overages (limit exceeded) the license server.",
      "properties": {
        "group": {
          "description": "Group is the api group.",
          "type": "string"
        },
        "overage": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.ResourceCount"
        },
        "resource": {
          "description": "Resource is the resource name for the request.",
          "type": "string"
        },
        "verbs": {
          "description": "Verbs is the list of verbs for the request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Button": {
      "description": "Button is an object that represents a button in the Loft UI that links to some external service for handling operations for licensing for example.",
      "properties": {
        "direct": {
          "description": "Direct indicates if the Loft front end should directly hit this endpoint. If false, it means that the Loft front end will be hitting the license server first to generate a one time token for the operation; this also means that there will be a redirect URL in the response to the request for this and that link should be followed by the front end.",
          "type": "boolean"
        },
        "displayText": {
          "description": "DisplayText is the text to display on the button. If display text is unset the button will never be shown in the loft UI.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the button (ButtonName). Optional.",
          "type": "string"
        },
        "url": {
          "description": "URL is the link at the other end of the button.",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Feature": {
      "description": "Feature contains information regarding to a feature",
      "properties": {
        "compatibility": {
          "description": "Compatibility contains a series of semver compatibility constraints",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "labels": {
          "description": "Labels contains a list of labels to be displayed for this feature (e.g. alpha, beta)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Name is the name of the feature (FeatureName) This cannot be FeatureName because it needs to be downward compatible e.g. older Loft version doesn't know a newer feature but it will still be received and still needs to be rendered in the license view",
          "type": "string"
        },
        "status": {
          "description": "Status shows the status of the feature (see type FeatureStatus)",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.GenericRequestInput": {
      "description": "GenericRequestInput defines the payload that needs to be sent to a button's action URL",
      "properties": {
        "payload": {
          "description": "Payload provides the json encoded payload",
          "type": "string"
        },
        "returnURL": {
          "description": "ReturnURL is the url from which the request is initiated",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.GenericRequestOutput": {
      "description": "GenericRequestOutput specifies the response",
      "properties": {
        "buttons": {
          "description": "Buttons to be shown to the user alongside other content (e.g. HTML).",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Button"
          },
          "type": "array"
        },
        "html": {
          "description": "HTML to display to the user.",
          "type": "string"
        },
        "redirectURL": {
          "description": "RedirectURL to redirect the user to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.InstanceTokenAuth": {
      "properties": {
        "certificate": {
          "description": "Certificate is the signing certificate for the token.",
          "type": "string"
        },
        "token": {
          "description": "Token is the jwt token identifying the loft instance.",
          "type": "string"
        }
      },
      "required": [
        "token",
        "certificate"
      ],
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Invoice": {
      "description": "Invoice provides details about an invoice",
      "properties": {
        "currency": {
          "description": "Currency specifies the currency of Total in 3-character ISO 4217 code Default is: \"\" (representing USD)",
          "type": "string"
        },
        "date": {
          "description": "Date contains the unix timestamp marking the date this invoices was or will be created",
          "format": "int64",
          "type": "integer"
        },
        "total": {
          "description": "Total is the total of the invoice",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.License": {
      "description": "License is a struct representing the license data sent to a Loft instance after checking in with the license server.",
      "properties": {
        "analytics": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Analytics",
          "description": "Analytics indicates the analytics endpoints and which requests should be sent to the analytics server."
        },
        "announcement": {
          "description": "Announcements is a map string/string such that we can easily add any additional data without needing to change types. For now, we will use the keys \"name\" and \"content\".",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Announcement"
          },
          "type": "array"
        },
        "block": {
          "description": "BlockRequests specifies which requests the product should block when a limit is exceeded.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.BlockRequest"
          },
          "type": "array"
        },
        "buttons": {
          "description": "Buttons is a slice of license server endpoints (buttons) that the Loft instance may need to hit. Each Button contains the display text and link for the front end to work with.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Button"
          },
          "type": "array"
        },
        "domainToken": {
          "description": "DomainToken holds the JWT with the URL that the Loft instance is publicly available on. (via Loft router)",
          "type": "string"
        },
        "instance": {
          "description": "InstanceID contains the instance id of the Loft instance",
          "type": "string"
        },
        "isOffline": {
          "description": "IsOffline indicates if the license is an offline license or not.",
          "type": "boolean"
        },
        "modules": {
          "description": "Modules is a list of modules.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Module"
          },
          "type": "array"
        },
        "plans": {
          "description": "Plans contains a list of plans",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Plan"
          },
          "type": "array"
        },
        "routes": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoutes"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute": {
      "description": "LicenseAPIRoute is a single route of the license api",
      "properties": {
        "direct": {
          "description": "Tells the frontend whether to make a direct request or to make it via the backend (via generic license api request)",
          "type": "boolean"
        },
        "method": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoutes": {
      "description": "LicenseAPIRoutes contains all key routes of the license api",
      "properties": {
        "chatAuth": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "checkout": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "featureDetails": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "featurePreview": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "featureSetup": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "moduleActivation": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "modulePreview": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        },
        "portal": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.LicenseAPIRoute"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Limit": {
      "description": "Limit defines a limit set in the license",
      "properties": {
        "displayName": {
          "description": "DisplayName is for display purposes.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource (ResourceName)",
          "type": "string"
        },
        "quantity": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.ResourceCount",
          "description": "Limit specifies the limit for this resource."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Module": {
      "description": "Module is a struct representing a module of the product",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "features": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Feature"
          },
          "type": "array"
        },
        "limits": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Limit"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the module (ModuleName)",
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Plan": {
      "description": "Plan definition",
      "properties": {
        "addons": {
          "description": "AddOns are plans that can be added to this plan",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Plan"
          },
          "type": "array"
        },
        "displayName": {
          "description": "DisplayName is the display name of the plan",
          "type": "string"
        },
        "features": {
          "description": "Features is a list of features included in the plan",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "ID of the plan",
          "type": "string"
        },
        "invoice": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Invoice",
          "description": "UpcomingInvoice provides a preview of the next invoice that will be created for this Plan"
        },
        "limits": {
          "description": "Limits is a list of resources included in the plan and their limits",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Limit"
          },
          "type": "array"
        },
        "period": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.PlanPeriod",
          "description": "Period provides information about the plan's current period This is nil unless this is the active plan"
        },
        "prices": {
          "description": "Prices provides details about the available prices (depending on the interval, for example)",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.PlanPrice"
          },
          "type": "array"
        },
        "status": {
          "description": "Status is the status of the plan There should only be 1 active plan at the top-level (not including AddOns) The respective price in Prices will have the active status as well",
          "type": "string"
        },
        "trial": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Trial",
          "description": "Trial provides details about a planned, ongoing or expired trial"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.PlanExpiration": {
      "description": "PlanExpiration provides details about the expiration of a plan",
      "properties": {
        "expiresAt": {
          "description": "ExpiresAt is the unix timestamp of when the plan expires",
          "format": "int64",
          "type": "integer"
        },
        "upgradesTo": {
          "description": "UpgradesTo states the name of the plan that is replacing the current one upon its expiration If this is nil, then this plan just expires (i.e. the subscription may be canceled, paused, etc.)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.PlanPeriod": {
      "description": "PlanPeriod provides details about the period of the plan",
      "properties": {
        "end": {
          "description": "CurrentPeriodEnd contains the unix timestamp marking the end of the current period",
          "format": "int64",
          "type": "integer"
        },
        "start": {
          "description": "CurrentPeriodStart contains the unix timestamp marking the start of the current period",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.PlanPrice": {
      "description": "PlanPrice defines a price for the plan",
      "properties": {
        "exp": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.PlanExpiration",
          "description": "Expiration provides information about when this plan expires"
        },
        "id": {
          "description": "ID of the price",
          "type": "string"
        },
        "interval": {
          "description": "Interval contains the time span of each period (e.g. month, year)",
          "type": "string"
        },
        "intervalCount": {
          "description": "IntervalCount specifies if the number of intervals (e.g. 3 [months])",
          "format": "double",
          "type": "number"
        },
        "quantity": {
          "description": "Quantity sets the quantity the TierResource is supposed to be at If this is the active price, then this is the subscription quantity (currently purchased quantity)",
          "format": "double",
          "type": "number"
        },
        "resource": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.TierResource",
          "description": "TierResource provides details about the main resource the tier quantity relates to This may be nil for plans that don't have their quantity tied to a resource"
        },
        "status": {
          "description": "Status is the status of the price (PlanStatus) If the plan is active, one of its prices must be active as well",
          "type": "string"
        },
        "tierMode": {
          "description": "TierMode defines how tiers should be used",
          "type": "string"
        },
        "tiers": {
          "description": "Tiers is a list of tiers in this plan",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.PriceTier"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.PriceTier": {
      "description": "PriceTier defines a tier within a plan",
      "properties": {
        "currency": {
          "description": "Currency specifies the currency of UnitPrice and FlatFee in 3-character ISO 4217 code Default is: \"\" (representing USD)",
          "type": "string"
        },
        "flatFee": {
          "description": "FlatFee is the flat fee for this tier",
          "format": "double",
          "type": "number"
        },
        "max": {
          "description": "MaxQuantity is the max quantity that can be purchased",
          "format": "double",
          "type": "number"
        },
        "min": {
          "description": "MinQuantity is the quantity included in this plan",
          "format": "double",
          "type": "number"
        },
        "unitPrice": {
          "description": "UnitPrice is the price per unit in this tier",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Request": {
      "description": "Request represents a request analytics information for an apigroup/resource and a list of verb actions for that resource.",
      "properties": {
        "group": {
          "description": "Group is the api group.",
          "type": "string"
        },
        "resource": {
          "description": "Resource is the resource name for the request.",
          "type": "string"
        },
        "verbs": {
          "description": "Verbs is the list of verbs for the request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.ResourceCount": {
      "description": "ResourceCount stores the number of existing, active and total number of resources created.",
      "properties": {
        "active": {
          "description": "Active specifies the number of currently active resource (non-sleeping).",
          "format": "int64",
          "type": "integer"
        },
        "created": {
          "description": "TotalCreated is a continuous counter of the amount of resources ever created.",
          "format": "int64",
          "type": "integer"
        },
        "total": {
          "description": "Total specifies the number of currently existing resources.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.TierResource": {
      "description": "TierResource provides details about the main resource the tier quantity relates to",
      "properties": {
        "name": {
          "description": "Name of the resource (ResourceName)",
          "type": "string"
        },
        "status": {
          "description": "Status defines which resources will be counted towards the limit (e.g. active, total, total created etc.)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.admin-apis.pkg.licenseapi.Trial": {
      "description": "Trial represents a trial",
      "properties": {
        "displayName": {
          "description": "DisplayName is a display name for the trial",
          "type": "string"
        },
        "downgradesTo": {
          "description": "DowngradesTo states the name of the plan that is replacing the current one once the trial expires If this is nil, then this plan just expires (i.e. the subscription may be canceled, paused, etc.)",
          "type": "string"
        },
        "end": {
          "description": "End is the unix timestamp stating when the trial will end or ended",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "ID is the unique id of this trial",
          "type": "string"
        },
        "start": {
          "description": "Start is the unix timestamp stating when the trial was started",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "Status is the status of this trial (TrialStatus)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.AppliedObject": {
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Bash": {
      "properties": {
        "clusterRole": {
          "description": "ClusterRole is the cluster role to use for this job",
          "type": "string"
        },
        "image": {
          "description": "Image is the image to use for this app",
          "type": "string"
        },
        "script": {
          "description": "Script is the script to execute.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ChartInfo": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ChartInfoSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ChartInfoStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ChartInfoSpec": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ChartInfoStatus": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "readme": {
          "description": "Readme is the readme of the chart",
          "type": "string"
        },
        "values": {
          "description": "Values are the default values of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ClusterQuota": {
      "description": "ClusterQuota holds the virtual cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ClusterQuotaSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ClusterQuotaStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ClusterQuotaSpec": {
      "properties": {
        "project": {
          "description": "Project is the project that this cluster quota should apply to",
          "type": "string"
        },
        "quota": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "quota is the quota definition with all the limits and selectors"
        },
        "team": {
          "description": "Team is the name of the team this quota should apply to",
          "type": "string"
        },
        "user": {
          "description": "User is the name of the user this quota should apply to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ClusterQuotaStatus": {
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.UserOrTeam",
          "description": "Owner describes the owner of the space. This can be either empty (nil), be a team or an loft user. If the space has an account that does not belong to an user / team in loft this is empty"
        },
        "total": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Total defines the actual enforced quota and its current usage across all projects"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo": {
      "properties": {
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the icon of the user / team",
          "type": "string"
        },
        "name": {
          "description": "Name is the kubernetes name of the object",
          "type": "string"
        },
        "subject": {
          "description": "The user subject",
          "type": "string"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EpochInfo": {
      "description": "EpochInfo holds information about how long the space was sleeping in the epoch",
      "properties": {
        "slept": {
          "description": "Amount of milliseconds the space has slept in the epoch",
          "format": "int64",
          "type": "integer"
        },
        "start": {
          "description": "Timestamp when the epoch has started",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmRelease": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseConfig": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are extra annotations for this helm release",
          "type": "object"
        },
        "bash": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Bash",
          "description": "Bash holds the bash script to execute in a container in the target"
        },
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        },
        "manifests": {
          "description": "Manifests holds kube manifests that will be deployed as a chart",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm chart values that will get merged with config and are then used to deploy the helm chart.",
          "type": "string"
        },
        "values": {
          "description": "Values is the set of extra Values added to the chart. These values merge with the default values inside of the chart. You can use golang templating in here with values from parameters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are extra annotations for this helm release",
          "type": "object"
        },
        "bash": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Bash",
          "description": "Bash holds the bash script to execute in a container in the target"
        },
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        },
        "manifests": {
          "description": "Manifests holds kube manifests that will be deployed as a chart",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm chart values that will get merged with config and are then used to deploy the helm chart.",
          "type": "string"
        },
        "values": {
          "description": "Values is the set of extra Values added to the chart. These values merge with the default values inside of the chart. You can use golang templating in here with values from parameters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseStatus": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Info",
          "description": "Info provides information about a release"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "version": {
          "description": "Revision is an int which represents the revision of the release.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Info": {
      "description": "Info describes release information.",
      "properties": {
        "deleted": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deleted tracks when this object was deleted."
        },
        "description": {
          "description": "Description is human-friendly \"log entry\" about this release.",
          "type": "string"
        },
        "first_deployed": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "FirstDeployed is when the release was first deployed."
        },
        "last_deployed": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "LastDeployed is when the release was last deployed."
        },
        "notes": {
          "description": "Contains the rendered templates/NOTES.txt if available",
          "type": "string"
        },
        "status": {
          "description": "Status is the current state of the release",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LastActivityInfo": {
      "description": "LastActivityInfo holds information about the last activity",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the api group that was used for the request",
          "type": "string"
        },
        "host": {
          "description": "Host is the host where this activity was recorded",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource",
          "type": "string"
        },
        "resource": {
          "description": "Resource is the resource of the request",
          "type": "string"
        },
        "subject": {
          "description": "Subject is the user or team where this activity was recorded",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the subresource of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the verb that was used for the request",
          "type": "string"
        },
        "virtualCluster": {
          "description": "VirtualCluster is the virtual cluster this activity happened in",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LocalClusterAccess": {
      "description": "LocalClusterAccess holds the cluster access information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LocalClusterAccessSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LocalClusterAccessStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LocalClusterAccessSpec": {
      "properties": {
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        },
        "priority": {
          "description": "Priority is a unique value that specifies the priority of this cluster access for the space constraints and quota. A higher priority means the cluster access object will override the space constraints of lower priority cluster access objects",
          "format": "int32",
          "type": "integer"
        },
        "quota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AccessQuota",
          "description": "Quota defines the quotas for the members that should be created."
        },
        "spaceConstraintsRef": {
          "description": "SpaceConstraintsRef is a reference to a space constraints object",
          "type": "string"
        },
        "teams": {
          "description": "Teams are the teams affected by this cluster access object",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users are the users affected by this cluster access object",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LocalClusterAccessStatus": {
      "properties": {
        "teams": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Maintainer": {
      "description": "Maintainer describes a Chart maintainer.",
      "properties": {
        "email": {
          "description": "Email is an optional email address to contact the named maintainer",
          "type": "string"
        },
        "name": {
          "description": "Name is a user name or organization name",
          "type": "string"
        },
        "url": {
          "description": "URL is an optional URL to an address for the named maintainer",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Metadata": {
      "description": "Metadata for a Chart file. This models the structure of a Chart.yaml file.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are additional mappings uninterpreted by Helm, made available for inspection by other applications.",
          "type": "object"
        },
        "apiVersion": {
          "description": "The API Version of this chart.",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed inside of this chart.",
          "type": "string"
        },
        "condition": {
          "description": "The condition to check to enable chart",
          "type": "string"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "description": "A one-sentence description of the chart",
          "type": "string"
        },
        "home": {
          "description": "The URL to a relevant project page, git repo, or contact person",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file.",
          "type": "string"
        },
        "keywords": {
          "description": "A list of string keywords",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kubeVersion": {
          "description": "KubeVersion is a SemVer constraint specifying the version of Kubernetes required.",
          "type": "string"
        },
        "maintainers": {
          "description": "A list of name and URL/email address combinations for the maintainer(s)",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Maintainer"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the chart",
          "type": "string"
        },
        "sources": {
          "description": "Source is the URL to the source code of this chart",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "The tags to check to enable chart",
          "type": "string"
        },
        "type": {
          "description": "Specifies the chart type: application or library",
          "type": "string"
        },
        "urls": {
          "description": "Urls where to find the chart contents",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "A SemVer 2 conformant version string of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig": {
      "description": "SleepModeConfig holds the sleepmode information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfigStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfigSpec": {
      "properties": {
        "deleteAfter": {
          "description": "DeleteAfter specifies after how many seconds of inactivity the space should be deleted",
          "format": "int64",
          "type": "integer"
        },
        "forceSleep": {
          "description": "If force sleep is true the space will sleep",
          "type": "boolean"
        },
        "forceSleepDuration": {
          "description": "If force sleep duration is set, this will force the space to sleep for the given duration. It also implies that forceSleep is true. During this period loft will also block certain requests to that space. If this is set to 0, it means the space will sleep until it is manually woken up via the cli or ui.",
          "format": "int64",
          "type": "integer"
        },
        "ignoreActiveConnections": {
          "description": "IgnoreActiveConnections ignores active connections on the namespace",
          "type": "boolean"
        },
        "ignoreAll": {
          "description": "IgnoreAll ignores all requests",
          "type": "boolean"
        },
        "ignoreGroups": {
          "description": "IgnoreGroups are ignored user groups",
          "type": "string"
        },
        "ignoreIngresses": {
          "description": "IgnoreIngresses ignores all ingresses",
          "type": "boolean"
        },
        "ignoreResourceNames": {
          "description": "IgnoreResourceNames are ignored resources and names",
          "type": "string"
        },
        "ignoreResourceVerbs": {
          "description": "IgnoreResourceVerbs are ignored resource verbs",
          "type": "string"
        },
        "ignoreResources": {
          "description": "IgnoreResources are ignored request resources",
          "type": "string"
        },
        "ignoreUserAgents": {
          "description": "IgnoreUseragents are ignored user agents with trailing wildcards '*' allowed. comma separated",
          "type": "string"
        },
        "ignoreVClusters": {
          "description": "IgnoreVClusters ignores vcluster requests",
          "type": "boolean"
        },
        "ignoreVerbs": {
          "description": "IgnoreVerbs are ignored request verbs",
          "type": "string"
        },
        "sleepAfter": {
          "description": "SleepAfter specifies after how many seconds of inactivity the space should sleep",
          "format": "int64",
          "type": "integer"
        },
        "sleepSchedule": {
          "description": "SleepSchedule specifies scheduled space sleep in Cron format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the schedule string will be ignored. Use \".Spec.Timezone\" field instead.",
          "type": "string"
        },
        "timezone": {
          "description": "Timezone specifies time zone used for scheduled space operations. Defaults to UTC. Accepts the same format as time.LoadLocation() in Go (https://pkg.go.dev/time#LoadLocation). The value should be a location name corresponding to a file in the IANA Time Zone database, such as \"America/New_York\".",
          "type": "string"
        },
        "wakeupSchedule": {
          "description": "WakeupSchedule specifies scheduled wakeup from sleep in Cron format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the schedule string will be ignored. Use \".Spec.Timezone\" field instead.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfigStatus": {
      "properties": {
        "currentEpoch": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EpochInfo",
          "description": "Optional info that indicates how long the space was sleeping in the current epoch"
        },
        "lastActivity": {
          "description": "LastActivity indicates the last activity in the namespace",
          "format": "int64",
          "type": "integer"
        },
        "lastActivityInfo": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LastActivityInfo",
          "description": "LastActivityInfo holds information about the last activity within this space"
        },
        "lastEpoch": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EpochInfo",
          "description": "Optional info that indicates how long the space was sleeping in the current epoch"
        },
        "scheduledSleep": {
          "description": "Indicates time of the next scheduled sleep based on .Spec.SleepSchedule and .Spec.ScheduleTimeZone The time is a Unix time, the number of seconds elapsed since January 1, 1970 UTC",
          "format": "int64",
          "type": "integer"
        },
        "scheduledWakeup": {
          "description": "Indicates time of the next scheduled wakeup based on .Spec.WakeupSchedule and .Spec.ScheduleTimeZone The time is a Unix time, the number of seconds elapsed since January 1, 1970 UTC",
          "format": "int64",
          "type": "integer"
        },
        "sleepType": {
          "description": "SleepType specifies a type of sleep, which has effect on which actions will cause the space to wake up.",
          "type": "string"
        },
        "sleepingSince": {
          "description": "SleepingSince specifies since when the space is sleeping (if this is not specified, loft assumes the space is not sleeping)",
          "format": "int64",
          "type": "integer"
        },
        "sleptLastSevenDays": {
          "description": "This is a calculated field that will be returned but not saved and describes the percentage since the space was created or the last 7 days the space has slept",
          "format": "double",
          "type": "number"
        },
        "sleptLastThirtyDays": {
          "description": "This is a calculated field that will be returned but not saved and describes the percentage since the space was created or the last 30 days the space has slept",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Space": {
      "description": "Space",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SpaceSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SpaceStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SpaceObjectsNamespaceStatus": {
      "properties": {
        "appliedObjects": {
          "description": "AppliedObjects are the objects that were applied on this namespace by the space spec objects",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.AppliedObject"
          },
          "type": "array"
        },
        "message": {
          "description": "Message is the human-readable message why this space is in this phase",
          "type": "string"
        },
        "phase": {
          "description": "Phase the namespace is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason why this namespace is in the current phase",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SpaceSpec": {
      "description": "SpaceSpec defines the desired state of Space",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the space",
          "type": "string"
        },
        "team": {
          "description": "Team is the owning team of the space",
          "type": "string"
        },
        "user": {
          "description": "User is the owning user of the space",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SpaceStatus": {
      "description": "SpaceStatus defines the observed state of Space",
      "properties": {
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.UserOrTeam",
          "description": "Owner describes the owner of the space. This can be either empty (nil), be a team or an loft user. If the space has an account that does not belong to an user / team in loft this is empty"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n\nPossible enum values:\n - `\"Active\"` means the namespace is available for use in the system\n - `\"Terminating\"` means the namespace is undergoing graceful termination",
          "enum": [
            "Active",
            "Terminating"
          ],
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the space"
        },
        "spaceObjectsStatus": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SpaceObjectsNamespaceStatus",
          "description": "SpaceObjectsStatus describes the status of applying space objects."
        },
        "templateSyncStatus": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.TemplateSyncStatus",
          "description": "TemplateSyncStatus describes the template sync status"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.TemplateSyncStatus": {
      "properties": {
        "phase": {
          "description": "Phase indicates the current phase the template is in",
          "type": "string"
        },
        "template": {
          "description": "Template is the json string of the template that was applied",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.UserOrTeam": {
      "properties": {
        "team": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "Team describes a team"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "User describes an user"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.VirtualCluster": {
      "description": "VirtualCluster holds the virtual cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.VirtualClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.VirtualClusterStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.VirtualClusterSpec": {
      "properties": {
        "access": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccess",
          "description": "Access defines the access of users and teams to the virtual cluster."
        },
        "accessPoint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterAccessPoint",
          "description": "AccessPoint defines settings to expose the virtual cluster directly via an ingress rather than through the (default) Loft proxy"
        },
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "charts": {
          "description": "Charts are helm charts that should get deployed",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.TemplateHelmChart"
          },
          "type": "array"
        },
        "forwardToken": {
          "description": "ForwardToken signals the proxy to pass through the used token to the virtual Kubernetes api server and do a TokenReview there.",
          "type": "boolean"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "HelmRelease is the helm release configuration for the virtual cluster."
        },
        "kubeConfigRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.SecretRef",
          "description": "DEPRECATED: don't use anymore A reference to the cluster admin kube config. This is needed for the cli & ui to access the virtual clusters"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
          "type": "string"
        },
        "pod": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.PodSelector",
          "description": "DEPRECATED: don't use anymore A label selector to select the virtual cluster pod to route incoming requests to."
        },
        "pro": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterProSpec",
          "description": "Pro defines the pro settings for the virtual cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.VirtualClusterStatus": {
      "properties": {
        "clusterPod": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Pod",
          "description": "ClusterPod is the cluster pod"
        },
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "controlPlaneReady": {
          "description": "ControlPlaneReady defines if the virtual cluster control plane is ready.",
          "type": "boolean"
        },
        "deployHash": {
          "description": "DeployHash saves the latest applied chart hash",
          "type": "string"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus",
          "description": "DEPRECATED: do not use anymore the status of the helm release that was used to deploy the virtual cluster"
        },
        "message": {
          "description": "Message describes the reason in human readable form why the cluster is in the current phase",
          "type": "string"
        },
        "multiNamespace": {
          "description": "MultiNamespace indicates if this is a multinamespace enabled virtual cluster",
          "type": "boolean"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "phase": {
          "description": "Phase describes the current phase the virtual cluster is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine readable form why the cluster is in the current phase",
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the space"
        },
        "syncerPod": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Pod",
          "description": "SyncerPod is the syncer pod"
        },
        "templateSyncStatus": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.TemplateSyncStatus",
          "description": "TemplateSyncStatus describes the template sync status"
        },
        "virtualClusterObjects": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus",
          "description": "VirtualClusterObjects are the objects that were applied within the virtual cluster itself"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AccessQuota": {
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference": {
      "properties": {
        "name": {
          "description": "Name of the target app",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace specifies in which target namespace the app should get deployed in",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters to use for the app",
          "type": "string"
        },
        "releaseName": {
          "description": "ReleaseName is the name of the app release",
          "type": "string"
        },
        "version": {
          "description": "Version of the app",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Chart": {
      "description": "Chart describes a chart",
      "properties": {
        "insecureSkipTlsVerify": {
          "description": "If tls certificate checks for the chart download should be skipped",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the chart name in the repository",
          "type": "string"
        },
        "password": {
          "description": "The password that is required for this repository",
          "type": "string"
        },
        "passwordRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartSecretRef",
          "description": "The password that is required for this repository"
        },
        "repoURL": {
          "description": "RepoURL is the repo url where the chart can be found",
          "type": "string"
        },
        "username": {
          "description": "The username that is required for this repository",
          "type": "string"
        },
        "usernameRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartSecretRef",
          "description": "The username that is required for this repository"
        },
        "version": {
          "description": "Version is the chart version in the repository",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartSecretRef": {
      "properties": {
        "projectSecretRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ProjectSecretRef",
          "description": "ProjectSecretRef holds the reference to a project secret"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartStatus": {
      "properties": {
        "lastAppliedChartConfigHash": {
          "description": "LastAppliedChartConfigHash is the last applied configuration",
          "type": "string"
        },
        "name": {
          "description": "Name of the chart that was applied",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the chart that was applied",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuota": {
      "description": "ClusterQuota is the Schema for the cluster quotas api",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaSpec": {
      "description": "ClusterQuotaSpec defines the desired state of ClusterQuota",
      "properties": {
        "project": {
          "description": "Project is the project that this cluster quota should apply to",
          "type": "string"
        },
        "quota": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "quota is the quota definition with all the limits and selectors"
        },
        "team": {
          "description": "Team is the name of the team this quota should apply to",
          "type": "string"
        },
        "user": {
          "description": "User is the name of the user this quota should apply to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaStatus": {
      "description": "ClusterQuotaStatus defines the observed state of ClusterQuota",
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace"
          },
          "type": "array"
        },
        "total": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Total defines the actual enforced quota and its current usage across all projects"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace": {
      "description": "ClusterQuotaStatusByNamespace holds the status of a specific namespace",
      "properties": {
        "namespace": {
          "description": "Namespace of the account this account quota applies to",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Status indicates how many resources have been consumed by this project"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterRoleRef": {
      "properties": {
        "name": {
          "description": "Name is the cluster role to assign",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition": {
      "description": "Condition defines an observation of a Cluster API resource operational state.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable."
        },
        "message": {
          "description": "A human readable message indicating details about the transition. This field may be empty.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.",
          "type": "string"
        },
        "severity": {
          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccess": {
      "properties": {
        "defaultClusterRole": {
          "description": "Specifies which cluster role should get applied to users or teams that do not match a rule below.",
          "type": "string"
        },
        "rules": {
          "description": "Rules defines which users and teams should have which access to the virtual cluster. If no rule matches an authenticated incoming user, the user will get cluster admin access.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccessRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccessRule": {
      "properties": {
        "clusterRole": {
          "description": "ClusterRole is the cluster role that should be assigned to the",
          "type": "string"
        },
        "teams": {
          "description": "Teams that this rule matches.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users this rule matches. * means all users.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccess": {
      "description": "LocalClusterAccess holds the cluster access information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccessSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccessStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccessSpec": {
      "properties": {
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        },
        "priority": {
          "description": "Priority is a unique value that specifies the priority of this cluster access for the space constraints and quota. A higher priority means the cluster access object will override the space constraints of lower priority cluster access objects",
          "format": "int32",
          "type": "integer"
        },
        "quota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AccessQuota",
          "description": "Quota defines the quotas for the members that should be created."
        },
        "spaceConstraintsRef": {
          "description": "SpaceConstraintsRef is a reference to a space constraints object",
          "type": "string"
        },
        "teams": {
          "description": "Teams are the teams affected by this cluster access object",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users are the users affected by this cluster access object",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccessStatus": {
      "description": "LocalClusterAccessStatus holds the status of a user access",
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalTeam": {
      "description": "LocalTeam holds the cluster user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalTeamSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalTeamStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalTeamSpec": {
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalTeamStatus": {
      "description": "LocalTeamStatus holds the status of a user access",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are the annotations of the user",
          "type": "object"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "groups": {
          "description": "The groups defined in a token that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are the labels of the user",
          "type": "object"
        },
        "username": {
          "description": "The username of the team that will be used for identification and docker registry namespace",
          "type": "string"
        },
        "users": {
          "description": "The loft users that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalUser": {
      "description": "LocalUser holds the cluster user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalUserSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalUserStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalUserSpec": {
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalUserStatus": {
      "description": "LocalUserStatus holds the status of a user access",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are the annotations of the user",
          "type": "object"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "groups": {
          "description": "The groups the user has access to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are the labels of the user",
          "type": "object"
        },
        "subject": {
          "description": "The user subject as presented by the token",
          "type": "string"
        },
        "teams": {
          "description": "Teams the user is currently part of",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus": {
      "properties": {
        "apps": {
          "description": "Apps are the apps that were applied",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "charts": {
          "description": "Charts are the charts that were applied",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartStatus"
          },
          "type": "array"
        },
        "lastAppliedObjects": {
          "description": "LastAppliedObjects holds the status for the objects that were applied",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.PodSelector": {
      "properties": {
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label selector to select the virtual cluster pod to route incoming requests to."
        },
        "port": {
          "description": "The port of the pod to route to",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ProjectSecretRef": {
      "properties": {
        "key": {
          "description": "Key of the project secret to use.",
          "type": "string"
        },
        "name": {
          "description": "Name of the project secret to use.",
          "type": "string"
        },
        "project": {
          "description": "Project is the project name where the secret is located in.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.SecretRef": {
      "description": "SecretRef is the reference to a secret containing the user password",
      "properties": {
        "key": {
          "type": "string"
        },
        "secretName": {
          "type": "string"
        },
        "secretNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.TemplateHelmChart": {
      "properties": {
        "insecureSkipTlsVerify": {
          "description": "If tls certificate checks for the chart download should be skipped",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the chart name in the repository",
          "type": "string"
        },
        "password": {
          "description": "The password that is required for this repository",
          "type": "string"
        },
        "passwordRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartSecretRef",
          "description": "The password that is required for this repository"
        },
        "releaseName": {
          "description": "ReleaseName is the preferred release name of the app",
          "type": "string"
        },
        "releaseNamespace": {
          "description": "ReleaseNamespace is the preferred release namespace of the app",
          "type": "string"
        },
        "repoURL": {
          "description": "RepoURL is the repo url where the chart can be found",
          "type": "string"
        },
        "timeout": {
          "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)",
          "type": "string"
        },
        "username": {
          "description": "The username that is required for this repository",
          "type": "string"
        },
        "usernameRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ChartSecretRef",
          "description": "The username that is required for this repository"
        },
        "values": {
          "description": "Values are the values that should get passed to the chart",
          "type": "string"
        },
        "version": {
          "description": "Version is the chart version in the repository",
          "type": "string"
        },
        "wait": {
          "description": "Wait determines if Loft should wait during deploy for the app to become ready",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.UserOrTeam": {
      "properties": {
        "team": {
          "description": "Name of a Loft team the user is part of",
          "type": "string"
        },
        "user": {
          "description": "Name of a Loft user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualCluster": {
      "description": "VirtualCluster holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterAccessPoint": {
      "properties": {
        "ingress": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterAccessPointIngressSpec",
          "description": "Ingress defines virtual cluster access via ingress"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterAccessPointIngressSpec": {
      "properties": {
        "enabled": {
          "description": "Enabled defines if the virtual cluster access point (via ingress) is enabled or not; requires the connected cluster to have the `loft.sh/ingress-suffix` annotation set to define the domain name suffix used for the ingress.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmChart": {
      "properties": {
        "name": {
          "description": "the name of the helm chart",
          "type": "string"
        },
        "password": {
          "description": "The password that is required for this repository",
          "type": "string"
        },
        "repo": {
          "description": "the repo of the helm chart",
          "type": "string"
        },
        "username": {
          "description": "The username that is required for this repository",
          "type": "string"
        },
        "version": {
          "description": "the version of the helm chart to use",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmChart",
          "description": "infos about what chart to deploy"
        },
        "values": {
          "description": "the values for the given chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus": {
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "release": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "the release that was deployed"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterProSpec": {
      "properties": {
        "enabled": {
          "description": "Enabled defines if the virtual cluster is a pro cluster or not",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterSpec": {
      "properties": {
        "access": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccess",
          "description": "Access defines the access of users and teams to the virtual cluster."
        },
        "accessPoint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterAccessPoint",
          "description": "AccessPoint defines settings to expose the virtual cluster directly via an ingress rather than through the (default) Loft proxy"
        },
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "charts": {
          "description": "Charts are helm charts that should get deployed",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.TemplateHelmChart"
          },
          "type": "array"
        },
        "forwardToken": {
          "description": "ForwardToken signals the proxy to pass through the used token to the virtual Kubernetes api server and do a TokenReview there.",
          "type": "boolean"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "HelmRelease is the helm release configuration for the virtual cluster."
        },
        "kubeConfigRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.SecretRef",
          "description": "DEPRECATED: don't use anymore A reference to the cluster admin kube config. This is needed for the cli & ui to access the virtual clusters"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
          "type": "string"
        },
        "pod": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.PodSelector",
          "description": "DEPRECATED: don't use anymore A label selector to select the virtual cluster pod to route incoming requests to."
        },
        "pro": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterProSpec",
          "description": "Pro defines the pro settings for the virtual cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterStatus": {
      "description": "VirtualClusterStatus holds the status of a virtual cluster",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "controlPlaneReady": {
          "description": "ControlPlaneReady defines if the virtual cluster control plane is ready.",
          "type": "boolean"
        },
        "deployHash": {
          "description": "DeployHash saves the latest applied chart hash",
          "type": "string"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus",
          "description": "DEPRECATED: do not use anymore the status of the helm release that was used to deploy the virtual cluster"
        },
        "message": {
          "description": "Message describes the reason in human readable form why the cluster is in the current phase",
          "type": "string"
        },
        "multiNamespace": {
          "description": "MultiNamespace indicates if this is a multinamespace enabled virtual cluster",
          "type": "boolean"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "phase": {
          "description": "Phase describes the current phase the virtual cluster is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine readable form why the cluster is in the current phase",
          "type": "string"
        },
        "virtualClusterObjects": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus",
          "description": "VirtualClusterObjects are the objects that were applied within the virtual cluster itself"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.audit.v1.Event": {
      "description": "Event holds the event information",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with an audit event that may be set by plugins invoked in the request serving chain, including authentication, authorization and admission plugins. Note that these annotations are for the audit event, and do not correspond to the metadata.annotations of the submitted object. Keys should uniquely identify the informing component to avoid name collisions (e.g. podsecuritypolicy.admission.k8s.io/policy). Values should be short. Annotations are included in the Metadata level.",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "auditID": {
          "description": "Unique audit ID, generated for each request.",
          "type": "string"
        },
        "impersonatedUser": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "Impersonated user information."
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "level": {
          "description": "AuditLevel at which event was generated",
          "type": "string"
        },
        "objectRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.audit.v1.ObjectReference",
          "description": "Object reference this request is targeted at. Does not apply for List-type requests, or non-resource requests."
        },
        "requestObject": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Unknown",
          "description": "API object from the request, in JSON format. The RequestObject is recorded as-is in the request (possibly re-encoded as JSON), prior to version conversion, defaulting, admission or merging. It is an external versioned object type, and may not be a valid object on its own. Omitted for non-resource requests.  Only logged at Request Level and higher."
        },
        "requestReceivedTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time the request reached the apiserver."
        },
        "requestURI": {
          "description": "RequestURI is the request URI as sent by the client to a server.",
          "type": "string"
        },
        "responseObject": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Unknown",
          "description": "API object returned in the response, in JSON. The ResponseObject is recorded after conversion to the external type, and serialized as JSON.  Omitted for non-resource requests.  Only logged at Response Level."
        },
        "responseStatus": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status",
          "description": "The response status. For successful and non-successful responses, this will only include the Code and StatusSuccess. For panic type error responses, this will be auto-populated with the error Message."
        },
        "sourceIPs": {
          "description": "Source IPs, from where the request originated and intermediate proxies.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "stage": {
          "description": "Stage of the request handling when this event instance was generated.",
          "type": "string"
        },
        "stageTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time the request reached current audit stage."
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "Authenticated user information."
        },
        "userAgent": {
          "description": "UserAgent records the user agent string reported by the client. Note that the UserAgent is provided by the client, and must not be trusted.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the kubernetes verb associated with the request. For non-resource requests, this is the lower-cased HTTP method.",
          "type": "string"
        }
      },
      "required": [
        "level",
        "auditID",
        "stage",
        "requestURI",
        "verb",
        "user"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.audit.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the name of the API group that contains the referred object. The empty string represents the core API group.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion is the version of the API group that contains the referred object.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "resourceVersion": {
          "type": "string"
        },
        "subresource": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAnalyticsSpec": {
      "description": "AgentAnalyticsSpec holds info the agent can use to send analytics data to the analytics backend.",
      "properties": {
        "analyticsEndpoint": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditConfig": {
      "properties": {
        "compress": {
          "description": "Compress determines if the rotated log files should be compressed using gzip. The default is not to perform compression.",
          "type": "boolean"
        },
        "disableAgentSyncBack": {
          "description": "If true, the agent will not send back any audit logs to Loft itself.",
          "type": "boolean"
        },
        "enabled": {
          "description": "If audit is enabled and incoming api requests will be logged based on the supplied policy.",
          "type": "boolean"
        },
        "level": {
          "description": "Level is an optional log level for audit logs. Cannot be used together with policy",
          "format": "int32",
          "type": "integer"
        },
        "maxAge": {
          "description": "MaxAge is the maximum number of days to retain old log files based on the timestamp encoded in their filename.  Note that a day is defined as 24 hours and may not exactly correspond to calendar days due to daylight savings, leap seconds, etc. The default is not to remove old log files based on age.",
          "format": "int32",
          "type": "integer"
        },
        "maxBackups": {
          "description": "MaxBackups is the maximum number of old log files to retain.  The default is to retain all old log files (though MaxAge may still cause them to get deleted.)",
          "format": "int32",
          "type": "integer"
        },
        "maxSize": {
          "description": "MaxSize is the maximum size in megabytes of the log file before it gets rotated. It defaults to 100 megabytes.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "The path where to save the audit log files. This is required if audit is enabled. Backup log files will be retained in the same directory.",
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuditPolicy",
          "description": "The audit policy to use and log requests. By default loft will not log anything"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEvent": {
      "description": "AgentAuditEvent holds an event",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEventSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEventStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "AgentAuditEvent",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEventSpec": {
      "description": "AgentAuditEventSpec holds the specification",
      "properties": {
        "events": {
          "description": "Events are the events the agent has recorded",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.audit.v1.Event"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEventStatus": {
      "description": "AgentAuditEventStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Announcement": {
      "description": "Announcement holds the announcement information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AnnouncementSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AnnouncementStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Announcement",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AnnouncementList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Announcement"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "AnnouncementList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AnnouncementSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AnnouncementStatus": {
      "properties": {
        "announcement": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.Announcement",
          "description": "Announcement is the html announcement that should be displayed in the frontend"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.App": {
      "description": "App holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AppSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AppStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AppCredentials": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "projectSecretRefs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "ProjectSecretRefs holds the resolved secret values for the project secret refs.",
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "AppCredentials",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AppList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "AppList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AppSpec": {
      "description": "AppSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters are the clusters this app can be installed in.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseConfig",
          "description": "Config is the helm config to use to deploy the helm release"
        },
        "defaultNamespace": {
          "description": "DefaultNamespace is the default namespace this app should installed in.",
          "type": "string"
        },
        "description": {
          "description": "Description describes an app",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "helm": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmConfiguration",
          "description": "DEPRECATED: Use config instead helm defines the configuration for a helm deployment"
        },
        "icon": {
          "description": "Icon holds an URL to the app icon",
          "type": "string"
        },
        "manifests": {
          "description": "DEPRECATED: Use config instead manifest represents kubernetes resources that will be deployed into the target namespace",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "readme": {
          "description": "Readme is a longer markdown string that describes the app.",
          "type": "string"
        },
        "recommendedApp": {
          "description": "RecommendedApp specifies where this app should show up as recommended app",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "streamContainer": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.StreamContainer",
          "description": "DEPRECATED: Use config.bash instead StreamContainer can be used to stream a containers logs instead of the helm output."
        },
        "timeout": {
          "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)",
          "type": "string"
        },
        "versions": {
          "description": "Versions are different app versions that can be referenced",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppVersion"
          },
          "type": "array"
        },
        "wait": {
          "description": "Wait determines if Loft should wait during deploy for the app to become ready",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AppStatus": {
      "description": "AppStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Apps": {
      "description": "Apps holds configuration for apps that should be shown",
      "properties": {
        "noDefault": {
          "description": "If this option is true, loft will not try to parse the default apps",
          "type": "boolean"
        },
        "predefinedApps": {
          "description": "Predefined apps that can be selected in the Spaces > Space menu",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.PredefinedApp"
          },
          "type": "array"
        },
        "repositories": {
          "description": "These are additional repositories that are parsed by loft",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmChartRepository"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Audit": {
      "description": "Audit holds the audit configuration options for loft. Changing any options will require a loft restart to take effect.",
      "properties": {
        "compress": {
          "description": "Compress determines if the rotated log files should be compressed using gzip. The default is not to perform compression.",
          "type": "boolean"
        },
        "dataStoreEndpoint": {
          "description": "DataStoreEndpoint is an endpoint to store events in.",
          "type": "string"
        },
        "dataStoreTTL": {
          "description": "DataStoreMaxAge is the maximum number of hours to retain old log events in the datastore",
          "format": "int32",
          "type": "integer"
        },
        "disableAgentSyncBack": {
          "description": "If true, the agent will not send back any audit logs to Loft itself.",
          "type": "boolean"
        },
        "enabled": {
          "description": "If audit is enabled and incoming api requests will be logged based on the supplied policy.",
          "type": "boolean"
        },
        "level": {
          "description": "Level is an optional log level for audit logs. Cannot be used together with policy",
          "format": "int32",
          "type": "integer"
        },
        "maxAge": {
          "description": "MaxAge is the maximum number of days to retain old log files based on the timestamp encoded in their filename.  Note that a day is defined as 24 hours and may not exactly correspond to calendar days due to daylight savings, leap seconds, etc. The default is not to remove old log files based on age.",
          "format": "int32",
          "type": "integer"
        },
        "maxBackups": {
          "description": "MaxBackups is the maximum number of old log files to retain.  The default is to retain all old log files (though MaxAge may still cause them to get deleted.)",
          "format": "int32",
          "type": "integer"
        },
        "maxSize": {
          "description": "MaxSize is the maximum size in megabytes of the log file before it gets rotated. It defaults to 100 megabytes.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "The path where to save the audit log files. This is required if audit is enabled. Backup log files will be retained in the same directory.",
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuditPolicy",
          "description": "The audit policy to use and log requests. By default loft will not log anything"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuditPolicy": {
      "description": "AuditPolicy describes the audit policy to use for loft",
      "properties": {
        "omitStages": {
          "description": "OmitStages is a list of stages for which no events are created. Note that this can also be specified per rule in which case the union of both are omitted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules specify the audit Level a request should be recorded at. A request may match multiple rules, in which case the FIRST matching rule is used. The default audit level is None, but can be overridden by a catch-all rule at the end of the list. PolicyRules are strictly ordered.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuditPolicyRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuditPolicyRule": {
      "description": "AuditPolicyRule describes a policy for auditing",
      "properties": {
        "clusters": {
          "description": "Clusters that this rule matches. Only applies to cluster requests. If this is set, no events for non cluster requests will be created. An empty list means no restrictions will apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "level": {
          "description": "The Level that requests matching this rule are recorded at.",
          "type": "string"
        },
        "namespaces": {
          "description": "Namespaces that this rule matches. The empty string \"\" matches non-namespaced resources. An empty list implies every namespace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of URL paths that should be audited. *s are allowed, but only as the full, final step in the path. Examples:\n \"/metrics\" - Log requests for apiserver metrics\n \"/healthz*\" - Log all health checks",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "omitStages": {
          "description": "OmitStages is a list of stages for which no events are created. Note that this can also be specified policy wide in which case the union of both are omitted. An empty list means no restrictions will apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestTargets": {
          "description": "RequestTargets is a list of request targets for which events are created. An empty list implies every request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources that this rule matches. An empty list implies all kinds in all API groups.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.GroupResources"
          },
          "type": "array"
        },
        "userGroups": {
          "description": "The user groups this rule applies to. A user is considered matching if it is a member of any of the UserGroups. An empty list implies every user group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "The users (by authenticated user name) this rule applies to. An empty list implies every user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "The verbs that match this rule. An empty list implies every verb.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "level"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Authentication": {
      "description": "Authentication holds authentication relevant information",
      "properties": {
        "accessKeyMaxTTLSeconds": {
          "description": "AccessKeyMaxTTLSeconds is the global maximum lifespan of an accesskey in seconds. Leaving it 0 or unspecified will disable it. Specifying 2592000 will mean all keys have a Time-To-Live of 30 days.",
          "format": "int64",
          "type": "integer"
        },
        "connectors": {
          "description": "Connectors are optional additional connectors for Loft.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ConnectorWithName"
          },
          "type": "array"
        },
        "customHttpHeaders": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "CustomHttpHeaders are additional headers that should be set for the authentication endpoints",
          "type": "object"
        },
        "disableTeamCreation": {
          "description": "Prevents from team creation for the new groups associated with the user at the time of logging in through sso, Default behaviour is false, this means that teams will be created for new groups.",
          "type": "boolean"
        },
        "github": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGithub",
          "description": "Github holds github authentication configuration"
        },
        "gitlab": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGitlab",
          "description": "Gitlab holds gitlab authentication configuration"
        },
        "google": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGoogle",
          "description": "Google holds google authentication configuration"
        },
        "loginAccessKeyTTLSeconds": {
          "description": "LoginAccessKeyTTLSeconds is the time in seconds an access key is kept until it is deleted. Leaving it unspecified will default to 20 days. Setting it to zero will disable the ttl. Specifying 2592000 will mean all keys have a  default Time-To-Live of 30 days.",
          "format": "int64",
          "type": "integer"
        },
        "microsoft": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationMicrosoft",
          "description": "Microsoft holds microsoft authentication configuration"
        },
        "oidc": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationOIDC",
          "description": "OIDC holds oidc authentication configuration"
        },
        "password": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationPassword",
          "description": "Password holds password authentication relevant information"
        },
        "rancher": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationRancher",
          "description": "Rancher holds the rancher authentication options"
        },
        "saml": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationSAML",
          "description": "SAML holds saml authentication configuration"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGithub": {
      "properties": {
        "clientId": {
          "description": "ClientID holds the github client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientID holds the github client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "hostName": {
          "description": "Required ONLY for GitHub Enterprise. This is the Hostname of the GitHub Enterprise account listed on the management console. Ensure this domain is routable on your network.",
          "type": "string"
        },
        "orgs": {
          "description": "Loft queries the following organizations for group information. Group claims are formatted as \"(org):(team)\". For example if a user is part of the \"engineering\" team of the \"coreos\" org, the group claim would include \"coreos:engineering\".\n\nIf orgs are specified in the config then user MUST be a member of at least one of the specified orgs to authenticate with loft.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGithubOrg"
          },
          "type": "array"
        },
        "redirectURI": {
          "description": "RedirectURI holds the redirect URI. Should be https://loft.domain.tld/auth/github/callback",
          "type": "string"
        },
        "rootCA": {
          "description": "ONLY for GitHub Enterprise. Optional field. Used to support self-signed or untrusted CA root certificates.",
          "type": "string"
        }
      },
      "required": [
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGithubOrg": {
      "description": "AuthenticationGithubOrg holds org-team filters, in which teams are optional.",
      "properties": {
        "name": {
          "description": "Organization name in github (not slug, full name). Only users in this github organization can authenticate.",
          "type": "string"
        },
        "teams": {
          "description": "Names of teams in a github organization. A user will be able to authenticate if they are members of at least one of these teams. Users in the organization can authenticate if this field is omitted from the config file.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGitlab": {
      "properties": {
        "baseURL": {
          "description": "BaseURL is optional, default = https://gitlab.com",
          "type": "string"
        },
        "clientId": {
          "description": "Gitlab client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Gitlab client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "Optional groups whitelist, communicated through the \"groups\" scope. If `groups` is omitted, all of the user's GitLab groups are returned. If `groups` is provided, this acts as a whitelist - only the user's GitLab groups that are in the configured `groups` below will go into the groups claim. Conversely, if the user is not in any of the configured `groups`, the user will not be authenticated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "redirectURI": {
          "description": "Redirect URI",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGoogle": {
      "properties": {
        "adminEmail": {
          "description": "Required if ServiceAccountFilePath The email of a GSuite super user which the service account will impersonate when listing groups",
          "type": "string"
        },
        "clientId": {
          "description": "Google client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Google client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "Optional list of whitelisted groups If this field is nonempty, only users from a listed group will be allowed to log in",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hostedDomains": {
          "description": "Optional list of whitelisted domains If this field is nonempty, only users from a listed domain will be allowed to log in",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "redirectURI": {
          "description": "loft redirect uri. E.g. https://loft.my.domain/auth/google/callback",
          "type": "string"
        },
        "scopes": {
          "description": "defaults to \"profile\" and \"email\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "serviceAccountFilePath": {
          "description": "Optional path to service account json If nonempty, and groups claim is made, will use authentication from file to check groups with the admin directory api",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate": {
      "properties": {
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "group": {
          "description": "Group is the name of the group that should be matched",
          "type": "string"
        }
      },
      "required": [
        "group"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationMicrosoft": {
      "properties": {
        "clientId": {
          "description": "Microsoft client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Microsoft client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "It is possible to require a user to be a member of a particular group in order to be successfully authenticated in loft.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "onlySecurityGroups": {
          "description": "configuration option restricts the list to include only security groups. By default all groups (security, Office 365, mailing lists) are included.",
          "type": "boolean"
        },
        "redirectURI": {
          "description": "loft redirect uri. Usually https://loft.my.domain/auth/microsoft/callback",
          "type": "string"
        },
        "tenant": {
          "description": "tenant configuration parameter controls what kinds of accounts may be authenticated in loft. By default, all types of Microsoft accounts (consumers and organizations) can authenticate in loft via Microsoft. To change this, set the tenant parameter to one of the following:\n\ncommon - both personal and business/school accounts can authenticate in loft via Microsoft (default) consumers - only personal accounts can authenticate in loft organizations - only business/school accounts can authenticate in loft tenant uuid or tenant name - only accounts belonging to specific tenant identified by either tenant uuid or tenant name can authenticate in loft",
          "type": "string"
        },
        "useGroupsAsWhitelist": {
          "description": "Restrict the groups claims to include only the user’s groups that are in the configured groups",
          "type": "boolean"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationOIDC": {
      "properties": {
        "caFile": {
          "description": "Path to a PEM encoded root certificate of the provider. Optional",
          "type": "string"
        },
        "clientId": {
          "description": "ClientID the JWT must be issued for, the \"sub\" field. This plugin only trusts a single client to ensure the plugin can be used with public providers.\n\nThe plugin supports the \"authorized party\" OpenID Connect claim, which allows specialized providers to issue tokens to a client for a different client. See: https://openid.net/specs/openid-connect-core-1_0.html#IDToken",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret to issue tokens from the OIDC provider",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "emailClaim": {
          "description": "EmailClaim is the JWT field to use as the user's email.",
          "type": "string"
        },
        "getUserInfo": {
          "description": "GetUserInfo, if specified, tells the OIDCAuthenticator to try to populate the user's information from the UserInfo.",
          "type": "boolean"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "If required groups is non empty, access is denied if the user is not part of at least one of the specified groups.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "groupsClaim": {
          "description": "GroupsClaim, if specified, causes the OIDCAuthenticator to try to populate the user's groups with an ID Token field. If the GroupsClaim field is present in an ID Token the value must be a string or list of strings.",
          "type": "string"
        },
        "groupsPrefix": {
          "description": "GroupsPrefix, if specified, causes claims mapping to group names to be prefixed with the value. A value \"oidc:\" would result in groups like \"oidc:engineering\" and \"oidc:marketing\".",
          "type": "string"
        },
        "insecureCa": {
          "description": "Specify whether to communicate without validating SSL certificates",
          "type": "boolean"
        },
        "issuerUrl": {
          "description": "IssuerURL is the URL the provider signs ID Tokens as. This will be the \"iss\" field of all tokens produced by the provider and is used for configuration discovery.\n\nThe URL is usually the provider's URL without a path, for example \"https://accounts.google.com\" or \"https://login.salesforce.com\".\n\nThe provider must implement configuration discovery. See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig",
          "type": "string"
        },
        "loftUsernameClaim": {
          "description": "LoftUsernameClaim is the JWT field to use as the user's username.",
          "type": "string"
        },
        "postLogoutRedirectURI": {
          "description": "Loft URI to be redirected to after successful logout by OIDC Provider",
          "type": "string"
        },
        "preferredUsername": {
          "description": "Configurable key which contains the preferred username claims",
          "type": "string"
        },
        "redirectURI": {
          "description": "loft redirect uri. E.g. https://loft.my.domain/auth/oidc/callback",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes that should be sent to the server. If empty, defaults to \"email\" and \"profile\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of the OIDC to show in the UI. Only for displaying purposes",
          "type": "string"
        },
        "usernameClaim": {
          "description": "UsernameClaim is the JWT field to use as the user's id.",
          "type": "string"
        },
        "usernamePrefix": {
          "description": "UsernamePrefix, if specified, causes claims mapping to username to be prefix with the provided value. A value \"oidc:\" would result in usernames like \"oidc:john\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationPassword": {
      "properties": {
        "disabled": {
          "description": "If true login via password is disabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationRancher": {
      "properties": {
        "bearerToken": {
          "description": "BearerToken holds the rancher API key in token username and password form. E.g. my-token:my-secret",
          "type": "string"
        },
        "host": {
          "description": "Host holds the rancher host, e.g. my-domain.com",
          "type": "string"
        },
        "insecure": {
          "description": "Insecure tells Loft if the Rancher endpoint is insecure.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationSAML": {
      "properties": {
        "allowedGroups": {
          "description": "List of groups to filter access based on membership",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ca": {
          "description": "CA to use when validating the signature of the SAML response.",
          "type": "string"
        },
        "caData": {
          "description": "CAData is a base64 encoded string that holds the ca certificate for validating the signature of the SAML response. Either CAData, CA or InsecureSkipSignatureValidation needs to be defined.",
          "format": "byte",
          "type": "string"
        },
        "emailAttr": {
          "description": "Name of attribute in the returned assertions to map to email",
          "type": "string"
        },
        "entityIssuer": {
          "description": "When provided Loft will include this as the Issuer value during AuthnRequest. It will also override the redirectURI as the required audience when evaluating AudienceRestriction elements in the response.",
          "type": "string"
        },
        "filterGroups": {
          "description": "If used with allowed groups, only forwards the allowed groups and not all groups specified.",
          "type": "boolean"
        },
        "groupsAttr": {
          "description": "Name of attribute in the returned assertions to map to groups",
          "type": "string"
        },
        "groupsDelim": {
          "description": "If GroupsDelim is supplied the connector assumes groups are returned as a single string instead of multiple attribute values. This delimiter will be used split the groups string.",
          "type": "string"
        },
        "insecureSkipSignatureValidation": {
          "description": "Ignore the ca cert",
          "type": "boolean"
        },
        "nameIDPolicyFormat": {
          "description": "Requested format of the NameID. The NameID value is is mapped to the ID Token 'sub' claim.\n\nThis can be an abbreviated form of the full URI with just the last component. For example, if this value is set to \"emailAddress\" the format will resolve to:\n\n\t\turn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n\nIf no value is specified, this value defaults to:\n\n\t\turn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
          "type": "string"
        },
        "redirectURI": {
          "description": "If the response assertion status value contains a Destination element, it must match this value exactly. Usually looks like https://your-loft-domain/auth/saml/callback",
          "type": "string"
        },
        "ssoIssuer": {
          "description": "Issuer value expected in the SAML response. Optional.",
          "type": "string"
        },
        "ssoURL": {
          "description": "SSO URL used for POST value.",
          "type": "string"
        },
        "usernameAttr": {
          "description": "Name of attribute in the returned assertions to map to username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Backup": {
      "description": "Backup holds the Backup information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Backup",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApply": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApplySpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "BackupApply",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApplySpec": {
      "description": "BackupApplySpec defines the desired state of BackupApply",
      "properties": {
        "raw": {
          "description": "Raw is the raw backup to apply",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupSpec": {
      "description": "BackupSpec holds the spec",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupStatus": {
      "description": "BackupStatus holds the status",
      "properties": {
        "rawBackup": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster": {
      "description": "Cluster holds the cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess": {
      "description": "ClusterAccess holds the globalClusterAccess information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessKey": {
      "description": "ClusterAccessKey holds the access key for the cluster",
      "properties": {
        "accessKey": {
          "description": "AccessKey is the access key used by the agent",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "caCert": {
          "description": "CaCert is an optional ca cert to use for the loft host connection",
          "type": "string"
        },
        "insecure": {
          "description": "Insecure signals if the loft host is insecure",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "loftHost": {
          "description": "LoftHost is the loft host used by the agent",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccessKey",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccessList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessSpec": {
      "description": "ClusterAccessSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "localClusterAccessTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalClusterAccessTemplate",
          "description": "LocalClusterAccessTemplate holds the cluster access template"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessStatus": {
      "description": "ClusterAccessStatus holds the status",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "spaceConstraint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccounts": {
      "properties": {
        "accounts": {
          "description": "Accounts are the accounts that belong to the user in the cluster",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Cluster",
          "description": "Cluster is the cluster object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAgentConfig": {
      "description": "ClusterAgentConfig holds the loft agent configuration",
      "properties": {
        "analyticsSpec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAnalyticsSpec",
          "description": "AnalyticsSpec holds info needed for the agent to send analytics data to the analytics backend."
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "audit": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditConfig",
          "description": "Audit holds the agent audit config"
        },
        "cluster": {
          "description": "Cluster is the cluster the agent is running in.",
          "type": "string"
        },
        "defaultImageRegistry": {
          "description": "DefaultImageRegistry defines if we should prefix the virtual cluster image",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "loftHost": {
          "description": "LoftHost defines the host for the agent's loft instance",
          "type": "string"
        },
        "loftInstanceID": {
          "description": "LoftInstanceID defines the instance id from the loft instance",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "tokenCaCert": {
          "description": "TokenCaCert is the certificate authority the Loft tokens will be signed with",
          "format": "byte",
          "type": "string"
        }
      },
      "required": [
        "analyticsSpec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAgentConfig",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterCharts": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "busy": {
          "description": "Busy will indicate if the chart parsing is still in progress.",
          "type": "boolean"
        },
        "charts": {
          "description": "Holds the available helm charts for this cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmChart"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "required": [
        "charts"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterCharts",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnect": {
      "description": "ClusterConnect holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnectSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnectStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterConnect",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnectSpec": {
      "properties": {
        "adminUser": {
          "description": "The user to create an admin account for",
          "type": "string"
        },
        "clusterTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster",
          "description": "the cluster template to create"
        },
        "config": {
          "description": "the kube config used to connect the cluster",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnectStatus": {
      "properties": {
        "failed": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterDomain": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "target": {
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterDomain",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMember": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "Info about the user or team"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMemberAccess": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "teams": {
          "description": "Teams holds all the teams that the current user has access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        },
        "users": {
          "description": "Users holds all the users that the current user has access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterMemberAccess",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMembers": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "teams": {
          "description": "Teams holds all the teams that have access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        },
        "users": {
          "description": "Users holds all the users that have access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterMembers",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterReset": {
      "properties": {
        "agent": {
          "type": "boolean"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rbac": {
          "type": "boolean"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterReset",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate": {
      "description": "ClusterRoleTemplate holds the clusterRoleTemplate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplateSpec": {
      "description": "ClusterRoleTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusterRoleTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterRoleTemplateTemplate",
          "description": "ClusterRoleTemplate holds the cluster role template"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a cluster role template object",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "localClusterRoleTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalClusterRoleTemplate",
          "description": "DEPRECATED: Use ClusterRoleTemplate instead LocalClusterRoleTemplate holds the cluster role template"
        },
        "management": {
          "description": "Management defines if this cluster role should be created in the management instance.",
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplateStatus": {
      "description": "ClusterRoleTemplateStatus holds the status",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterSpec": {
      "description": "ClusterSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SecretRef",
          "description": "Holds a reference to a secret that holds the kube config to access this cluster"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "If specified this name is displayed in the UI instead of the metadata name",
          "type": "string"
        },
        "local": {
          "description": "Local specifies if it is the local cluster that should be connected, when this is specified, config is optional",
          "type": "boolean"
        },
        "managementNamespace": {
          "description": "The namespace where the cluster components will be installed in",
          "type": "string"
        },
        "networkPeer": {
          "description": "NetworkPeer specifies if the cluster is connected via tailscale, when this is specified, config is optional",
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "unusable": {
          "description": "If unusable is true, no spaces or virtual clusters can be scheduled on this cluster.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterStatus": {
      "description": "ClusterStatus holds the status",
      "properties": {
        "message": {
          "type": "string"
        },
        "online": {
          "description": "Online is whether the cluster is currently connected to the coordination server.",
          "type": "boolean"
        },
        "phase": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterVirtualClusterDefaults": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "defaultTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplate",
          "description": "DefaultTemplate is the default virtual cluster template"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "latestVersion": {
          "description": "LatestVersion is the latest virtual cluster version",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "values": {
          "description": "Default values for the virtual cluster chart",
          "type": "string"
        },
        "warning": {
          "description": "Warning should be somehow shown to the user when there is a problem retrieving the defaults",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterVirtualClusterDefaults",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Config": {
      "description": "Config holds the loft configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ConfigStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ConfigSpec": {
      "description": "ConfigSpec holds the specification",
      "properties": {
        "raw": {
          "description": "Raw holds the raw config",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ConfigStatus": {
      "description": "ConfigStatus holds the status, which is the parsed raw config",
      "properties": {
        "apps": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Apps",
          "description": "Apps holds configuration around apps"
        },
        "audit": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Audit",
          "description": "Audit holds audit configuration"
        },
        "auth": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Authentication",
          "description": "Authentication holds the information for authentication"
        },
        "devPodSubDomain": {
          "description": "DevPodSubDomain holds a subdomain in the following form *.workspace.my-domain.com",
          "type": "string"
        },
        "loftHost": {
          "description": "LoftHost holds the domain where the loft instance is hosted. This should not include https or http. E.g. loft.my-domain.com",
          "type": "string"
        },
        "oidc": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OIDC",
          "description": "OIDC holds oidc provider relevant information"
        },
        "uiSettings": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettingsConfig",
          "description": "UISettings holds the settings for modifying the Loft user interface"
        },
        "vault": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VaultIntegrationSpec",
          "description": "VaultIntegration holds the vault integration configuration"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ConnectorWithName": {
      "properties": {
        "displayName": {
          "description": "DisplayName is the name that should show up in the ui",
          "type": "string"
        },
        "github": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGithub",
          "description": "Github holds github authentication configuration"
        },
        "gitlab": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGitlab",
          "description": "Gitlab holds gitlab authentication configuration"
        },
        "google": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationGoogle",
          "description": "Google holds google authentication configuration"
        },
        "id": {
          "description": "ID is the id that should show up in the url",
          "type": "string"
        },
        "microsoft": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationMicrosoft",
          "description": "Microsoft holds microsoft authentication configuration"
        },
        "oidc": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationOIDC",
          "description": "OIDC holds oidc authentication configuration"
        },
        "saml": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AuthenticationSAML",
          "description": "SAML holds saml authentication configuration"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance": {
      "description": "DevPodWorkspaceInstance holds the DevPodWorkspaceInstance information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstanceList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceSpec": {
      "description": "DevPodWorkspaceInstanceSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access to the DevPod machine instance object itself",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a DevPod machine instance",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters are values to pass to the template. The values should be encoded as YAML string where each parameter is represented as a top-level field key.",
          "type": "string"
        },
        "runnerRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerRef",
          "description": "RunnerRef is the reference to the connected runner holding this workspace"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateDefinition",
          "description": "Template is the inline template to use for DevPod machine creation. This is mutually exclusive with templateRef."
        },
        "templateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateRef",
          "description": "TemplateRef holds the DevPod machine template reference"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceState": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "state": {
          "description": "State holds the workspaces state as given by 'devpod export'",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstanceState",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceStatus": {
      "description": "DevPodWorkspaceInstanceStatus holds the status",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the DevPod machine might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "ignoreReconciliation": {
          "description": "IgnoreReconciliation ignores reconciliation for this object",
          "type": "boolean"
        },
        "instance": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateDefinition",
          "description": "Instance is the template rendered with all the parameters"
        },
        "lastWorkspaceStatus": {
          "description": "LastWorkspaceStatus is the last workspace status reported by the runner.",
          "type": "string"
        },
        "message": {
          "description": "Message describes the reason in human-readable form why the DevPod machine is in the current phase",
          "type": "string"
        },
        "phase": {
          "description": "Phase describes the current phase the DevPod machine instance is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine-readable form why the cluster is in the current phase",
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the workspace. This will only be shown in the front end."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate": {
      "description": "DevPodWorkspaceTemplate holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplateSpec": {
      "description": "DevPodWorkspaceTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the virtual cluster template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set provider values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateDefinition",
          "description": "Template holds the DevPod workspace template"
        },
        "versions": {
          "description": "Versions are different versions of the template that can be referenced as well",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplateStatus": {
      "description": "DevPodWorkspaceTemplateStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointToken": {
      "description": "DirectClusterEndpointToken holds the object information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointTokenStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DirectClusterEndpointToken",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointTokenSpec": {
      "description": "DirectClusterEndpointTokenSpec holds the object specification",
      "properties": {
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope is the optional scope of the direct cluster endpoint"
        },
        "ttl": {
          "description": "The time to life for this access token in seconds",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointTokenStatus": {
      "description": "DirectClusterEndpointTokenStatus holds the object status",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Event": {
      "description": "Event holds an event",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.EventSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.EventStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.EventList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Event"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.EventSpec": {
      "description": "EventSpec holds the specification",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.EventStatus": {
      "description": "EventStatus holds the status, which is the parsed raw config",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with an audit event that may be set by plugins invoked in the request serving chain, including authentication, authorization and admission plugins. Note that these annotations are for the audit event, and do not correspond to the metadata.annotations of the submitted object. Keys should uniquely identify the informing component to avoid name collisions (e.g. podsecuritypolicy.admission.k8s.io/policy). Values should be short. Annotations are included in the Metadata level.",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "auditID": {
          "description": "Unique audit ID, generated for each request.",
          "type": "string"
        },
        "impersonatedUser": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "Impersonated user information."
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "level": {
          "description": "AuditLevel at which event was generated",
          "type": "string"
        },
        "objectRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.audit.v1.ObjectReference",
          "description": "Object reference this request is targeted at. Does not apply for List-type requests, or non-resource requests."
        },
        "requestObject": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Unknown",
          "description": "API object from the request, in JSON format. The RequestObject is recorded as-is in the request (possibly re-encoded as JSON), prior to version conversion, defaulting, admission or merging. It is an external versioned object type, and may not be a valid object on its own. Omitted for non-resource requests.  Only logged at Request Level and higher."
        },
        "requestReceivedTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time the request reached the apiserver."
        },
        "requestURI": {
          "description": "RequestURI is the request URI as sent by the client to a server.",
          "type": "string"
        },
        "responseObject": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Unknown",
          "description": "API object returned in the response, in JSON. The ResponseObject is recorded after conversion to the external type, and serialized as JSON.  Omitted for non-resource requests.  Only logged at Response Level."
        },
        "responseStatus": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status",
          "description": "The response status. For successful and non-successful responses, this will only include the Code and StatusSuccess. For panic type error responses, this will be auto-populated with the error Message."
        },
        "sourceIPs": {
          "description": "Source IPs, from where the request originated and intermediate proxies.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "stage": {
          "description": "Stage of the request handling when this event instance was generated.",
          "type": "string"
        },
        "stageTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time the request reached current audit stage."
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "Authenticated user information."
        },
        "userAgent": {
          "description": "UserAgent records the user agent string reported by the client. Note that the UserAgent is provided by the client, and must not be trusted.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the kubernetes verb associated with the request. For non-resource requests, this is the lower-cased HTTP method.",
          "type": "string"
        }
      },
      "required": [
        "level",
        "auditID",
        "stage",
        "requestURI",
        "verb",
        "user"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature": {
      "description": "Feature holds the feature information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.FeatureSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.FeatureStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.FeatureList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "FeatureList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.FeatureSpec": {
      "description": "FeatureSpec holds the specification",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.FeatureStatus": {
      "description": "FeatureStatus holds the status",
      "properties": {
        "compatibility": {
          "description": "Compatibility contains a series of semver compatibility constraints",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "internal": {
          "description": "Internal marks internal features that should not be shown on the license view",
          "type": "boolean"
        },
        "labels": {
          "description": "Labels contains a list of labels to be displayed for this feature (e.g. alpha, beta)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Name is the name of the feature (FeatureName) This cannot be FeatureName because it needs to be downward compatible e.g. older Loft version doesn't know a newer feature but it will still be received and still needs to be rendered in the license view",
          "type": "string"
        },
        "status": {
          "description": "Status shows the status of the feature (see type FeatureStatus)",
          "type": "string"
        },
        "used": {
          "description": "Used marks features that are currently used in the product",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.GroupResources": {
      "description": "GroupResources represents resource kinds in an API group.",
      "properties": {
        "group": {
          "description": "Group is the name of the API group that contains the resources. The empty string represents the core API group.",
          "type": "string"
        },
        "resourceNames": {
          "description": "ResourceNames is a list of resource instance names that the policy matches. Using this field requires Resources to be specified. An empty list implies that every instance of the resource is matched.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nAn empty list implies all resources and subresources in this API groups apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthToken": {
      "description": "IngressAuthToken holds the object information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthTokenStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "IngressAuthToken",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthTokenSpec": {
      "description": "IngressAuthTokenSpec holds the object specification",
      "properties": {
        "host": {
          "description": "Host is the host where the UI should get redirected",
          "type": "string"
        },
        "signature": {
          "description": "Signature is the signature of the agent for the host",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthTokenStatus": {
      "description": "IngressAuthTokenStatus holds the object status",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Kiosk": {
      "description": "Kiosk holds the kiosk types",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.KioskSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.KioskStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Kiosk",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.KioskSpec": {
      "properties": {
        "UISettings": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettings",
          "description": "ui.loft.sh"
        },
        "chartInfo": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ChartInfo"
        },
        "clusterQuota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.ClusterQuota"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmRelease",
          "description": "cluster.loft.sh"
        },
        "jsPolicy": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicy",
          "description": "policy.loft.sh"
        },
        "jsPolicyBundle": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundle"
        },
        "jsPolicyViolations": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolations"
        },
        "license": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.License"
        },
        "localClusterAccess": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.LocalClusterAccess"
        },
        "localStorageClusterAccess": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccess",
          "description": "storage.loft.sh"
        },
        "localTeam": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalTeam"
        },
        "localUser": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalUser"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig"
        },
        "space": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Space"
        },
        "storageClusterQuota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterQuota"
        },
        "storageVirtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualCluster"
        },
        "virtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.VirtualCluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.KioskStatus": {
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.License": {
      "description": "License holds the license information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "License",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequest": {
      "description": "LicenseRequest holds license request information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequestSpec",
          "description": "Spec is the admin request spec (the input for the request)."
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequestStatus",
          "description": "Status is the admin request output (the output or result of the request)."
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "LicenseRequest",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequestSpec": {
      "properties": {
        "input": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.GenericRequestInput",
          "description": "Input is the input payload to send to the url."
        },
        "url": {
          "description": "URL is the url for the request.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequestStatus": {
      "properties": {
        "output": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.GenericRequestOutput",
          "description": "Output is where the request output is stored."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseStatus": {
      "properties": {
        "license": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.License",
          "description": "License is the license data received from the license server."
        },
        "resourceUsage": {
          "additionalProperties": {
            "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.ResourceCount"
          },
          "description": "ResourceUsage shows the current usage of license limit.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseToken": {
      "description": "License Token holds the license token information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseTokenStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "LicenseToken",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseTokenSpec": {
      "properties": {
        "payload": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseTokenStatus": {
      "properties": {
        "token": {
          "$ref": "#/definitions/com.github.loft-sh.admin-apis.pkg.licenseapi.InstanceTokenAuth"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgrade": {
      "description": "LoftUpgrade holds the upgrade information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgradeSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgradeStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "LoftUpgrade",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgradeSpec": {
      "properties": {
        "namespace": {
          "description": "If specified, updated the release in the given namespace",
          "type": "string"
        },
        "release": {
          "description": "If specified, uses this as release name",
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgradeStatus": {
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.OIDC": {
      "description": "OIDC holds oidc provider relevant information",
      "properties": {
        "clients": {
          "description": "The clients that are allowed to request loft tokens",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OIDCClient"
          },
          "type": "array"
        },
        "enabled": {
          "description": "If true indicates that loft will act as an OIDC server",
          "type": "boolean"
        },
        "wildcardRedirect": {
          "description": "If true indicates that loft will allow wildcard '*' in client redirectURIs",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.OIDCClient": {
      "description": "OIDCClient holds information about a client",
      "properties": {
        "clientId": {
          "description": "The client id of the client",
          "type": "string"
        },
        "clientSecret": {
          "description": "The client secret of the client",
          "type": "string"
        },
        "name": {
          "description": "The client name",
          "type": "string"
        },
        "redirectURIs": {
          "description": "A registered set of redirect URIs. When redirecting from dex to the client, the URI requested to redirect to MUST match one of these values, unless the client is \"public\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "redirectURIs"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey": {
      "description": "OwnedAccessKey is an access key that is owned by the current user",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKeySpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKeyStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKeySpec": {
      "properties": {
        "description": {
          "description": "Description describes an app",
          "type": "string"
        },
        "disabled": {
          "description": "If this field is true, the access key is still allowed to exist, however will not work to access the api",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "groups": {
          "description": "Groups specifies extra groups to apply when using this access key",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "identity": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyIdentity",
          "description": "If available, contains information about the sso login data for this access key"
        },
        "identityRefresh": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the identity was refreshed"
        },
        "key": {
          "description": "The actual access key that will be used as a bearer token",
          "type": "string"
        },
        "oidcLogin": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyOIDC",
          "description": "DEPRECATED: Use identity instead If available, contains information about the oidc login data for this access key"
        },
        "oidcProvider": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyOIDCProvider",
          "description": "If the token is a refresh token, contains information about it"
        },
        "parent": {
          "description": "DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.\n\nThe use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope defines the scope of the access key."
        },
        "subject": {
          "description": "Subject is a generic subject that can be used instead of user or team",
          "type": "string"
        },
        "team": {
          "description": "The team this access key refers to",
          "type": "string"
        },
        "ttl": {
          "description": "The time to life for this access key",
          "format": "int64",
          "type": "integer"
        },
        "ttlAfterLastActivity": {
          "description": "If this is specified, the time to life for this access key will start after the lastActivity instead of creation timestamp",
          "type": "boolean"
        },
        "type": {
          "description": "The type of an access key, which basically describes if the access key is user managed or managed by loft itself.",
          "type": "string"
        },
        "user": {
          "description": "The user this access key refers to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKeyStatus": {
      "properties": {
        "lastActivity": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time this access key was used to access the api"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolation": {
      "description": "PolicyViolation",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolationSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolationStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "PolicyViolation",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolationList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolation"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "PolicyViolationList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolationSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolationStatus": {
      "properties": {
        "cluster": {
          "description": "Cluster is the cluster where the violation occurred in",
          "type": "string"
        },
        "policy": {
          "description": "Policy is the name of the policy where the violation occurred",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "The Loft user that caused the violation"
        },
        "violation": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation",
          "description": "Violation contains information about the violation"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.PredefinedApp": {
      "description": "PredefinedApp holds information about a predefined app",
      "properties": {
        "chart": {
          "description": "Chart holds the repo/chart name of the predefined app",
          "type": "string"
        },
        "clusters": {
          "description": "Holds the cluster names where to display this app",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "iconUrl": {
          "description": "IconURL specifies an url to the icon that should be displayed for this app. If none is specified the icon from the chart metadata is used.",
          "type": "string"
        },
        "initialValues": {
          "description": "InitialValues holds the initial values for this app. The values will be prefilled automatically. There are certain placeholders that can be used within the values that are replaced by the loft UI automatically.",
          "type": "string"
        },
        "initialVersion": {
          "description": "InitialVersion holds the initial version of this app. This version will be selected automatically.",
          "type": "string"
        },
        "readmeUrl": {
          "description": "ReadmeURL specifies an url to the readme page of this predefined app. If empty an url will be constructed to artifact hub.",
          "type": "string"
        },
        "title": {
          "description": "Title is the name that should be displayed for the predefined app. If empty the chart name is used.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Project": {
      "description": "Project holds the Project information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfo": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfoSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfoStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectChartInfo",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfoSpec": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfoStatus": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "readme": {
          "description": "Readme is the readme of the chart",
          "type": "string"
        },
        "values": {
          "description": "Values are the default values of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectCharts": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "busy": {
          "description": "Busy will indicate if the chart parsing is still in progress.",
          "type": "boolean"
        },
        "charts": {
          "description": "Holds the available helm charts for this cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmChart"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "required": [
        "charts"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectCharts",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectClusters": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "clusters": {
          "description": "Clusters holds all the allowed clusters",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "runners": {
          "description": "Runners holds all the allowed runners",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectClusters",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpace": {
      "description": "ProjectImportSpace holds project space import information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "sourceSpace": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpaceSource",
          "description": "SourceSpace is the space to import into this project"
        }
      },
      "required": [
        "sourceSpace"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectImportSpace",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpaceSource": {
      "properties": {
        "cluster": {
          "description": "Cluster name of the cluster the space is running on",
          "type": "string"
        },
        "importName": {
          "description": "ImportName is an optional name to use as the spaceinstance name, if not provided the space name will be used",
          "type": "string"
        },
        "name": {
          "description": "Name of the space to import",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualCluster": {
      "description": "ProjectImportVirtualCluster holds project vcluster import information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "skipHelmDeploy": {
          "description": "SkipHelmDeploy will skip management of the vClusters helm deployment",
          "type": "boolean"
        },
        "sourceVirtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualClusterSource",
          "description": "SourceVirtualCluster is the virtual cluster to import into this project"
        },
        "upgradeToPro": {
          "description": "UpgradeToPro indicates whether we should upgrade to Pro on import",
          "type": "boolean"
        }
      },
      "required": [
        "sourceVirtualCluster"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectImportVirtualCluster",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualClusterSource": {
      "properties": {
        "cluster": {
          "description": "Cluster name of the cluster the virtual cluster is running on",
          "type": "string"
        },
        "importName": {
          "description": "ImportName is an optional name to use as the virtualclusterinstance name, if not provided the vcluster name will be used",
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual cluster to import",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the virtual cluster to import",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner of the virtual cluster to import"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMember": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "Info about the user or team"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMembers": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "teams": {
          "description": "Teams holds all the teams that have access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMember"
          },
          "type": "array"
        },
        "users": {
          "description": "Users holds all the users that have access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMember"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectMembers",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstance": {
      "description": "ProjectMigrateSpaceInstance holds project spaceinstance migrate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "sourceSpaceInstance": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstanceSource",
          "description": "SourceSpaceInstance is the spaceinstance to migrate into this project"
        }
      },
      "required": [
        "sourceSpaceInstance"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectMigrateSpaceInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstanceSource": {
      "properties": {
        "name": {
          "description": "Name of the spaceinstance to migrate",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the spaceinstance to migrate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstance": {
      "description": "ProjectMigrateVirtualClusterInstance holds project vclusterinstance migrate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "sourceVirtualClusterInstance": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstanceSource",
          "description": "SourceVirtualClusterInstance is the virtual cluster instance to migrate into this project"
        }
      },
      "required": [
        "sourceVirtualClusterInstance"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectMigrateVirtualClusterInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstanceSource": {
      "properties": {
        "name": {
          "description": "Name of the virtual cluster instance to migrate",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the virtual cluster instance to migrate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret": {
      "description": "ProjectSecret holds the Project Secret information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectSecretList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretSpec": {
      "description": "ProjectSecretSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "description": {
          "description": "Description describes a Project secret",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretStatus": {
      "description": "ProjectSecretStatus holds the status",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the project might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSpec": {
      "description": "ProjectSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "allowedClusters": {
          "description": "AllowedClusters are target clusters that are allowed to target with environments.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AllowedCluster"
          },
          "type": "array"
        },
        "allowedRunners": {
          "description": "AllowedRunners are target runners that are allowed to target with DevPod environments.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AllowedRunner"
          },
          "type": "array"
        },
        "allowedTemplates": {
          "description": "AllowedTemplates are the templates that are allowed to use in this project.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AllowedTemplate"
          },
          "type": "array"
        },
        "argoCD": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoIntegrationSpec",
          "description": "ArgoIntegration holds information about ArgoCD Integration"
        },
        "automaticImport": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AutomaticImport",
          "description": "AutomaticImport imports vClusters & Namespace automatically"
        },
        "description": {
          "description": "Description describes an app",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "members": {
          "description": "Members are the users and teams that are part of this project",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Member"
          },
          "type": "array"
        },
        "namespacePattern": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.NamespacePattern",
          "description": "NamespacePattern specifies template patterns to use for creating each space or virtual cluster's namespace"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "quotas": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Quotas",
          "description": "Quotas define the quotas inside the project"
        },
        "rancher": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RancherIntegrationSpec",
          "description": "RancherIntegration holds information about Rancher Integration"
        },
        "requireTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RequireTemplate",
          "description": "RequireTemplate configures if a template is required for instance creation."
        },
        "vault": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VaultIntegrationSpec",
          "description": "VaultIntegration holds information about Vault Integration"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectStatus": {
      "description": "ProjectStatus holds the status",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the project might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "quotas": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatus",
          "description": "Quotas holds the quota status"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectTemplates": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "defaultDevPodWorkspaceTemplate": {
          "description": "DefaultDevPodWorkspaceTemplate",
          "type": "string"
        },
        "defaultSpaceTemplate": {
          "description": "DefaultSpaceTemplate",
          "type": "string"
        },
        "defaultVirtualClusterTemplate": {
          "description": "DefaultVirtualClusterTemplate is the default template for the project",
          "type": "string"
        },
        "devPodWorkspaceTemplates": {
          "description": "DevPodWorkspaceTemplates holds all the allowed space templates",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spaceTemplates": {
          "description": "SpaceTemplates holds all the allowed space templates",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
          },
          "type": "array"
        },
        "virtualClusterTemplates": {
          "description": "VirtualClusterTemplates holds all the allowed virtual cluster templates",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ProjectTemplates",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectToken": {
      "description": "RedirectToken holds the object information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectTokenStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "RedirectToken",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectTokenSpec": {
      "description": "RedirectTokenSpec holds the object specification",
      "properties": {
        "token": {
          "description": "Token is the token that includes the redirect request",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectTokenStatus": {
      "description": "RedirectTokenStatus holds the object status",
      "properties": {
        "redirectURL": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKey": {
      "description": "ResetAccessKey is an access key that is owned by another user",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKeySpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKeyStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ResetAccessKey",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKeySpec": {
      "properties": {
        "description": {
          "description": "Description describes an app",
          "type": "string"
        },
        "disabled": {
          "description": "If this field is true, the access key is still allowed to exist, however will not work to access the api",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "groups": {
          "description": "Groups specifies extra groups to apply when using this access key",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "identity": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyIdentity",
          "description": "If available, contains information about the sso login data for this access key"
        },
        "identityRefresh": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the identity was refreshed"
        },
        "key": {
          "description": "The actual access key that will be used as a bearer token",
          "type": "string"
        },
        "oidcLogin": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyOIDC",
          "description": "DEPRECATED: Use identity instead If available, contains information about the oidc login data for this access key"
        },
        "oidcProvider": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyOIDCProvider",
          "description": "If the token is a refresh token, contains information about it"
        },
        "parent": {
          "description": "DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.\n\nThe use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope defines the scope of the access key."
        },
        "subject": {
          "description": "Subject is a generic subject that can be used instead of user or team",
          "type": "string"
        },
        "team": {
          "description": "The team this access key refers to",
          "type": "string"
        },
        "ttl": {
          "description": "The time to life for this access key",
          "format": "int64",
          "type": "integer"
        },
        "ttlAfterLastActivity": {
          "description": "If this is specified, the time to life for this access key will start after the lastActivity instead of creation timestamp",
          "type": "boolean"
        },
        "type": {
          "description": "The type of an access key, which basically describes if the access key is user managed or managed by loft itself.",
          "type": "string"
        },
        "user": {
          "description": "The user this access key refers to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKeyStatus": {
      "properties": {
        "lastActivity": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time this access key was used to access the api"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner": {
      "description": "Runner holds the Runner information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerAccessKey": {
      "description": "RunnerAccessKey holds the access key for the runner",
      "properties": {
        "accessKey": {
          "description": "AccessKey is the access key used by the runner",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "RunnerAccessKey",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerConfig": {
      "description": "RunnerConfig holds the config the runner retrieves from Loft",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "tokenCaCert": {
          "description": "TokenCaCert is the certificate authority the Loft tokens will be signed with",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "RunnerConfig",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "RunnerList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerSpec": {
      "description": "RunnerSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusterRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerClusterRef",
          "description": "If ClusterRef is defined, Loft will schedule the runner on the given cluster."
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "endpoint": {
          "description": "Endpoint is the hostname used to connect directly to the runner",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "unusable": {
          "description": "If unusable is true, no DevPod workspaces can be scheduled on this runner.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerStatus": {
      "description": "RunnerStatus holds the status",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "message": {
          "description": "Message describes the reason in human-readable form",
          "type": "string"
        },
        "phase": {
          "description": "Phase describes the current phase the space instance is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine-readable form",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Self": {
      "description": "Self holds information about the currently logged in user",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Self",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSpec": {
      "properties": {
        "accessKey": {
          "description": "AccessKey is an optional access key to use instead of the provided one",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfStatus": {
      "properties": {
        "accessKey": {
          "description": "The name of the currently used access key",
          "type": "string"
        },
        "accessKeyScope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScope",
          "description": "The scope of the currently used access key"
        },
        "accessKeyType": {
          "description": "The type of the currently used access key",
          "type": "string"
        },
        "chatAuthToken": {
          "description": "ChatAuthToken is the token used to authenticate with the in-product chat widget in the UI",
          "type": "string"
        },
        "groups": {
          "description": "The groups of the currently logged in user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceID": {
          "description": "InstanceID is the loft instance id",
          "type": "string"
        },
        "subject": {
          "description": "The subject of the currently logged in user",
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "The name of the currently logged in team"
        },
        "uid": {
          "description": "UID is the user uid",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserInfo",
          "description": "The name of the currently logged in user"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReview": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReviewStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReviewSpec": {
      "properties": {
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "NonResourceAttributes describes information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "ResourceAuthorizationAttributes describes information for a resource access request"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReviewStatus": {
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret": {
      "description": "SharedSecret holds the secret information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SharedSecretList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretSpec": {
      "description": "SharedSecretSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams which will be transformed to Roles and RoleBindings",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "description": {
          "description": "Description describes a shared secret",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretStatus": {
      "description": "SharedSecretStatus holds the status",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the project might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint": {
      "description": "SpaceConstraint holds the globalSpaceConstraint information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraintSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraintStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraintList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceConstraintList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraintSpec": {
      "description": "SpaceConstraintSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a space constraint object",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "localSpaceConstraintTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalSpaceConstraintTemplate",
          "description": "LocalSpaceConstraintTemplate holds the space constraint template"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraintStatus": {
      "description": "SpaceConstraintStatus holds the status",
      "properties": {
        "clusterRole": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance": {
      "description": "SpaceInstance holds the SpaceInstance information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceInstanceList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceSpec": {
      "description": "SpaceInstanceSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusterRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterRef",
          "description": "ClusterRef is the reference to the connected cluster holding this space"
        },
        "description": {
          "description": "Description describes a space instance",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "extraAccessRules": {
          "description": "ExtraAccessRules defines extra rules which users and teams should have which access to the virtual cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccessRule"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters are values to pass to the template. The values should be encoded as YAML string where each parameter is represented as a top-level field key.",
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateDefinition",
          "description": "Template is the inline template to use for space creation. This is mutually exclusive with templateRef."
        },
        "templateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateRef",
          "description": "TemplateRef holds the space template reference"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceStatus": {
      "description": "SpaceInstanceStatus holds the status",
      "properties": {
        "canUpdate": {
          "description": "CanUpdate specifies if the requester can update the instance",
          "type": "boolean"
        },
        "canUse": {
          "description": "CanUse specifies if the requester can use the instance",
          "type": "boolean"
        },
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "ignoreReconciliation": {
          "description": "IgnoreReconciliation tells the controller to ignore reconciliation for this instance -- this is primarily used when migrating virtual cluster instances from project to project; this prevents a situation where there are two virtual cluster instances representing the same virtual cluster which could cause issues with concurrent reconciliations of the same object. Once the virtual cluster instance has been cloned and placed into the new project, this (the \"old\") virtual cluster instance can safely be deleted.",
          "type": "boolean"
        },
        "message": {
          "description": "Message describes the reason in human-readable form",
          "type": "string"
        },
        "phase": {
          "description": "Phase describes the current phase the space instance is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine-readable form",
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the space. This will only be shown in the front end."
        },
        "space": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateDefinition",
          "description": "Space is the template rendered with all the parameters"
        },
        "spaceObjects": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus",
          "description": "SpaceObjects are the objects that were applied within the virtual cluster space"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate": {
      "description": "SpaceTemplate holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplateSpec": {
      "description": "SpaceTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the space template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateDefinition",
          "description": "Template holds the space template"
        },
        "versions": {
          "description": "Versions are different space template versions that can be referenced as well",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplateStatus": {
      "description": "SpaceTemplateStatus holds the status",
      "properties": {
        "apps": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReview": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReviewStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReviewSpec": {
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object"
        },
        "groups": {
          "description": "Groups is the groups you're testing for.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "NonResourceAttributes describes information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "ResourceAuthorizationAttributes describes information for a resource access request"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReviewStatus": {
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Task": {
      "description": "Task holds the Task information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TaskList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskLog": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TaskLog",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskSpec": {
      "description": "TaskSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope defines the scope of the access key."
        },
        "target": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Target",
          "description": "Target where this task should get executed"
        },
        "task": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TaskDefinition",
          "description": "Task defines the task to execute"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskStatus": {
      "description": "TaskStatus holds the status",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "containerState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus",
          "description": "DEPRECATED: This is not set anymore after migrating to runners ContainerState describes the container state of the task"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.UserOrTeam"
        },
        "podPhase": {
          "description": "PodPhase describes the phase this task is in\n\nPossible enum values:\n - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).\n - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.\n - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.\n - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.\n - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)",
          "enum": [
            "Failed",
            "Pending",
            "Running",
            "Succeeded",
            "Unknown"
          ],
          "type": "string"
        },
        "started": {
          "description": "Started determines if the task was started",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.Team": {
      "description": "Team holds the team information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamAccessKeys": {
      "properties": {
        "accessKeys": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TeamAccessKeys",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamClusters": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccounts"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TeamClusters",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TeamList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamSpec": {
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates that should be applied for the user",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "groups": {
          "description": "The groups defined in a token that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets holds secret references to image pull secrets the team has access to.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.KindSecretRef"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "username": {
          "description": "The username of the team that will be used for identification and docker registry namespace",
          "type": "string"
        },
        "users": {
          "description": "The loft users that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamStatus": {
      "properties": {
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates holds information about which cluster account templates were applied DEPRECATED: Use status.clusters instead",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplateStatus"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters holds information about which clusters the user has accounts in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccountClusterStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.User": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserAccessKeys": {
      "properties": {
        "accessKeys": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserAccessKeys",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserClusters": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccounts"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserClusters",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserInfo": {
      "properties": {
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the icon of the user / team",
          "type": "string"
        },
        "name": {
          "description": "Name is the kubernetes name of the object",
          "type": "string"
        },
        "subject": {
          "description": "The user subject",
          "type": "string"
        },
        "teams": {
          "description": "Teams are the teams the user is part of",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserPermissions": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "clusterRoles": {
          "description": "ClusterRoles that apply to the user.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserPermissionsRole"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "namespaceRoles": {
          "description": "NamespaceRoles that apply to the user. Can be either regular roles or cluster roles that are namespace scoped.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserPermissionsRole"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserPermissions",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserPermissionsRole": {
      "properties": {
        "clusterRole": {
          "description": "ClusterRole is the name of the cluster role assigned to this user.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace where this rules are valid.",
          "type": "string"
        },
        "role": {
          "description": "Role is the name of the role assigned to this user.",
          "type": "string"
        },
        "rules": {
          "description": "Rules are the roles rules",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserProfile": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "currentPassword": {
          "description": "CurrentPassword is the current password of the user",
          "type": "string"
        },
        "custom": {
          "description": "Custom is custom information that should be saved of the user",
          "type": "string"
        },
        "displayName": {
          "description": "The new display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "Email is the new email of the user",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the new icon of the user",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "password": {
          "description": "Password is the new password of the user",
          "type": "string"
        },
        "username": {
          "description": "Username is the new username of the user",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserProfile",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserSpec": {
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "accessKeysRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SecretRef",
          "description": "Deprecated: Use the Access Key CRD instead A reference to the users access keys"
        },
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates that should be applied for the user",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "codesRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SecretRef",
          "description": "A reference to the users access keys"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "disabled": {
          "description": "If disabled is true, an user will not be able to login anymore. All other user resources are unaffected and other users can still interact with this user",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "groups": {
          "description": "The groups the user has access to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "icon": {
          "description": "The URL to an icon that should be shown for the user",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets holds secret references to image pull secrets the user has access to.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.KindSecretRef"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "passwordRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SecretRef",
          "description": "A reference to the user password"
        },
        "ssoGroups": {
          "description": "SSOGroups is used to remember groups that were added from sso.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subject": {
          "description": "The user subject as presented by the token",
          "type": "string"
        },
        "tokenGeneration": {
          "description": "TokenGeneration can be used to invalidate all user tokens",
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.UserStatus": {
      "description": "UserStatus holds the status of an user",
      "properties": {
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates holds information about which cluster account templates were applied DEPRECATED: Use status.clusters instead",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplateStatus"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters holds information about which clusters the user has accounts in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccountClusterStatus"
          },
          "type": "array"
        },
        "teams": {
          "description": "Teams the user is currently part of",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance": {
      "description": "VirtualClusterInstance holds the VirtualClusterInstance information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfig": {
      "description": "VirtualClusterInstanceKubeConfig holds kube config request and response data for virtual clusters",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfigStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceKubeConfig",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfigSpec": {
      "properties": {
        "certificateTTL": {
          "description": "CertificateTTL holds the ttl (in seconds) to set for the certificate associated with the returned kubeconfig. This field is optional, if no value is provided, the certificate TTL will be set to one day. If set to zero, this will cause loft to pass nil to the certificate signing request, which will result in the certificate being valid for the clusters `cluster-signing-duration` value which is typically one year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfigStatus": {
      "properties": {
        "kubeConfig": {
          "description": "KubeConfig holds the final kubeconfig output",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceLog": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceLog",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceSpec": {
      "description": "VirtualClusterInstanceSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access to the virtual cluster object itself",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusterRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterClusterRef",
          "description": "ClusterRef is the reference to the connected cluster holding this virtual cluster"
        },
        "description": {
          "description": "Description describes a virtual cluster instance",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "extraAccessRules": {
          "description": "ExtraAccessRules defines extra rules which users and teams should have which access to the virtual cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccessRule"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters are values to pass to the template. The values should be encoded as YAML string where each parameter is represented as a top-level field key.",
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "Template is the inline template to use for virtual cluster creation. This is mutually exclusive with templateRef."
        },
        "templateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateRef",
          "description": "TemplateRef holds the virtual cluster template reference"
        },
        "workloadClusterRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterClusterRef",
          "description": "WorkloadClusterRef is the reference to the connected cluster holding this virtual cluster's workloads."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceStatus": {
      "description": "VirtualClusterInstanceStatus holds the status",
      "properties": {
        "canUpdate": {
          "description": "CanUpdate specifies if the requester can update the instance",
          "type": "boolean"
        },
        "canUse": {
          "description": "CanUse specifies if the requester can use the instance",
          "type": "boolean"
        },
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "ignoreReconciliation": {
          "description": "IgnoreReconciliation tells the controller to ignore reconciliation for this instance -- this is primarily used when migrating virtual cluster instances from project to project; this prevents a situation where there are two virtual cluster instances representing the same virtual cluster which could cause issues with concurrent reconciliations of the same object. Once the virtual cluster instance has been cloned and placed into the new project, this (the \"old\") virtual cluster instance can safely be deleted.",
          "type": "boolean"
        },
        "message": {
          "description": "Message describes the reason in human-readable form why the cluster is in the current phase",
          "type": "string"
        },
        "phase": {
          "description": "Phase describes the current phase the virtual cluster instance is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine-readable form why the cluster is in the current phase",
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the space. This will only be shown in the front end."
        },
        "spaceObjects": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus",
          "description": "SpaceObjects are the objects that were applied within the virtual cluster space"
        },
        "virtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "VirtualCluster is the template rendered with all the parameters"
        },
        "virtualClusterObjects": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus",
          "description": "VirtualClusterObjects are the objects that were applied within the virtual cluster itself"
        },
        "workloadSpaceObjects": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.ObjectsStatus",
          "description": "WorkloadSpaceObjects are the objects that were applied within the virtual cluster workload space"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceWorkloadKubeConfig": {
      "description": "VirtualClusterInstanceWorkloadKubeConfig holds kube config request and response data for virtual clusters",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "kubeConfig": {
          "description": "KubeConfig holds the workload cluster's kubeconfig to access the virtual cluster",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "token": {
          "description": "Token holds the service account token vcluster should use to connect to the remote cluster",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceWorkloadKubeConfig",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate": {
      "description": "VirtualClusterTemplate holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplateSpec": {
      "description": "VirtualClusterTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the virtual cluster template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "spaceTemplateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef",
          "description": "DEPRECATED: SpaceTemplate to use to create the virtual cluster space if it does not exist"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "Template holds the virtual cluster template"
        },
        "versions": {
          "description": "Versions are different versions of the template that can be referenced as well",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplateStatus": {
      "description": "VirtualClusterTemplateStatus holds the status",
      "properties": {
        "apps": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access": {
      "description": "Access describes the access to a secret",
      "properties": {
        "name": {
          "description": "Name is an optional name that is used for this access rule",
          "type": "string"
        },
        "subresources": {
          "description": "Subresources defines the sub resources that are allowed by this access rule",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "teams": {
          "description": "Teams specifies which teams should be able to access this secret with the aforementioned verbs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users specifies which users should be able to access this secret with the aforementioned verbs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyIdentity": {
      "properties": {
        "connector": {
          "description": "Connector is the name of the connector this access key was created from",
          "type": "string"
        },
        "connectorData": {
          "description": "ConnectorData holds data used by the connector for subsequent requests after initial authentication, such as access tokens for upstream providers.\n\nThis data is never shared with end users, OAuth clients, or through the API.",
          "format": "byte",
          "type": "string"
        },
        "email": {
          "description": "The user email",
          "type": "string"
        },
        "emailVerified": {
          "description": "If the user email was verified",
          "type": "boolean"
        },
        "groups": {
          "description": "The groups from the identity provider",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "preferredUsername": {
          "description": "The preferred username / display name",
          "type": "string"
        },
        "userId": {
          "description": "The subject of the user",
          "type": "string"
        },
        "username": {
          "description": "The username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyOIDC": {
      "properties": {
        "accessToken": {
          "description": "The current access token that was created during login",
          "format": "byte",
          "type": "string"
        },
        "idToken": {
          "description": "The current id token that was created during login",
          "format": "byte",
          "type": "string"
        },
        "lastRefresh": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the id token was refreshed"
        },
        "refreshToken": {
          "description": "The current refresh token that was created during login",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyOIDCProvider": {
      "properties": {
        "clientId": {
          "description": "ClientId the token was generated for",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce to use",
          "type": "string"
        },
        "redirectUri": {
          "description": "RedirectUri to use",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes to use",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScope": {
      "properties": {
        "allowLoftCli": {
          "description": "AllowLoftCLI allows certain read-only management requests to make sure loft cli works correctly with this specific access key.",
          "type": "boolean"
        },
        "clusters": {
          "description": "Clusters specifies the project cluster the access key is allowed to access.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeCluster"
          },
          "type": "array"
        },
        "projects": {
          "description": "Projects specifies the projects the access key should have access to.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeProject"
          },
          "type": "array"
        },
        "rules": {
          "description": "DEPRECATED: Use Projects, Spaces and VirtualClusters instead Rules specifies the rules that should apply to the access key.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeRule"
          },
          "type": "array"
        },
        "spaces": {
          "description": "Spaces specifies the spaces the access key is allowed to access.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeSpace"
          },
          "type": "array"
        },
        "virtualClusters": {
          "description": "VirtualClusters specifies the virtual clusters the access key is allowed to access.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeVirtualCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeCluster": {
      "properties": {
        "cluster": {
          "description": "Cluster is the name of the cluster to access. You can specify * to select all clusters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeProject": {
      "properties": {
        "project": {
          "description": "Project is the name of the project. You can specify * to select all projects.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeRule": {
      "description": "AccessKeyScopeRule describes a rule for the access key",
      "properties": {
        "cluster": {
          "description": "Cluster that this rule matches. Only applies to cluster requests. If this is set, no requests for non cluster requests are allowed. An empty cluster means no restrictions will apply.",
          "type": "string"
        },
        "namespaces": {
          "description": "Namespaces that this rule matches. The empty string \"\" matches non-namespaced resources. An empty list implies every namespace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of URL paths that should be checked. *s are allowed, but only as the full, final step in the path. Examples:\n \"/metrics\" - Log requests for apiserver metrics\n \"/healthz*\" - Log all health checks",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestTargets": {
          "description": "RequestTargets is a list of request targets that are allowed. An empty list implies every request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources that this rule matches. An empty list implies all kinds in all API groups.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.GroupResources"
          },
          "type": "array"
        },
        "verbs": {
          "description": "The verbs that match this rule. An empty list implies every verb.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "virtualClusters": {
          "description": "VirtualClusters that this rule matches. Only applies to virtual cluster requests. An empty list means no restrictions will apply.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyVirtualCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeSpace": {
      "properties": {
        "project": {
          "description": "Project is the name of the project.",
          "type": "string"
        },
        "space": {
          "description": "Space is the name of the space. You can specify * to select all spaces.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyScopeVirtualCluster": {
      "properties": {
        "project": {
          "description": "Project is the name of the project.",
          "type": "string"
        },
        "virtualCluster": {
          "description": "VirtualCluster is the name of the virtual cluster to access. You can specify * to select all virtual clusters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccessKeyVirtualCluster": {
      "properties": {
        "name": {
          "description": "Name of the virtual cluster. Empty means all virtual clusters.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the virtual cluster. Empty means all namespaces.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccountClusterStatus": {
      "description": "AccountClusterStatus holds the status of an account in a cluster",
      "properties": {
        "accounts": {
          "description": "Accounts is the account name of the user in the cluster",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "accountsClusterTemplateStatus": {
          "description": "AccountsClusterTemplate status is the status of the account cluster template that was used to create the cluster account",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccountClusterTemplateStatus"
          },
          "type": "array"
        },
        "cluster": {
          "description": "Cluster is the cluster name of the user in the cluster",
          "type": "string"
        },
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AccountClusterTemplateStatus": {
      "properties": {
        "account": {
          "description": "Account is the name of the account in the cluster",
          "type": "string"
        },
        "accountTemplateHash": {
          "description": "AccountTemplateHash is the hash of the account template that was applied",
          "type": "string"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the cluster account template",
          "type": "string"
        },
        "ownsHash": {
          "description": "OwnsHash is the hash of the owns part of the cluster account template that was applied",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AllowedCluster": {
      "properties": {
        "name": {
          "description": "Name is the name of the cluster that is allowed to create an environment in.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AllowedRunner": {
      "properties": {
        "name": {
          "description": "Name is the name of the runner that is allowed to create an environment in.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AllowedTemplate": {
      "properties": {
        "group": {
          "description": "Group of the template that is allowed. Currently only supports storage.loft.sh",
          "type": "string"
        },
        "isDefault": {
          "description": "IsDefault specifies if the template should be used as a default",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the template that is allowed. Currently only supports DevPodWorkspaceTemplate, VirtualClusterTemplate & SpaceTemplate",
          "type": "string"
        },
        "name": {
          "description": "Name of the template",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter": {
      "properties": {
        "defaultValue": {
          "description": "DefaultValue is the default value if none is specified",
          "type": "string"
        },
        "description": {
          "description": "Description is the description to show for this parameter",
          "type": "string"
        },
        "invalidation": {
          "description": "Invalidation regex that if matched will reject the input",
          "type": "string"
        },
        "label": {
          "description": "Label is the label to show for this parameter",
          "type": "string"
        },
        "max": {
          "description": "Max is the maximum number if type is number",
          "format": "int32",
          "type": "integer"
        },
        "min": {
          "description": "Min is the minimum number if type is number",
          "format": "int32",
          "type": "integer"
        },
        "options": {
          "description": "Options are the options if type is enum",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "placeholder": {
          "description": "Placeholder shown in the UI",
          "type": "string"
        },
        "required": {
          "description": "Required specifies if this parameter is required",
          "type": "boolean"
        },
        "section": {
          "description": "Section where this app should be displayed. Apps with the same section name will be grouped together",
          "type": "string"
        },
        "type": {
          "description": "Type of the parameter. Can be one of: string, multiline, boolean, enum and password",
          "type": "string"
        },
        "validation": {
          "description": "Validation regex that if matched will allow the input",
          "type": "string"
        },
        "variable": {
          "description": "Variable is the path of the variable. Can be foo or foo.bar for nested objects.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppTask": {
      "properties": {
        "appReference": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference",
          "description": "AppReference is the reference to the app to deploy"
        },
        "rollbackRevision": {
          "description": "RollbackRevision is the revision to rollback to",
          "type": "string"
        },
        "type": {
          "description": "Type is the task type. Defaults to Upgrade",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppVersion": {
      "properties": {
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseConfig",
          "description": "Config is the helm config to use to deploy the helm release"
        },
        "defaultNamespace": {
          "description": "DefaultNamespace is the default namespace this app should installed in.",
          "type": "string"
        },
        "icon": {
          "description": "Icon holds an URL to the app icon",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "readme": {
          "description": "Readme is a longer markdown string that describes the app.",
          "type": "string"
        },
        "streamContainer": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.StreamContainer",
          "description": "DEPRECATED: Use config.bash instead StreamContainer can be used to stream a containers logs instead of the helm output."
        },
        "timeout": {
          "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)",
          "type": "string"
        },
        "version": {
          "description": "Version is the version. Needs to be in X.X.X format.",
          "type": "string"
        },
        "wait": {
          "description": "Wait determines if Loft should wait during deploy for the app to become ready",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoIntegrationSpec": {
      "properties": {
        "cluster": {
          "description": "Cluster defines the name of the cluster that ArgoCD is deployed into -- if not provided this will default to 'loft-cluster'.",
          "type": "string"
        },
        "enabled": {
          "description": "Enabled indicates if the ArgoCD Integration is enabled for the project -- this knob only enables the syncing of virtualclusters, but does not enable SSO integration or project creation (see subsequent spec sections!).",
          "type": "boolean"
        },
        "namespace": {
          "description": "Namespace defines the namespace in which ArgoCD is running in the cluster.",
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectSpec",
          "description": "Project defines project related values for the ArgoCD Integration. Enabling Project integration will cause Loft to generate and manage an ArgoCD appProject that corresponds to the Loft Project."
        },
        "sso": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoSSOSpec",
          "description": "SSO defines single-sign-on related values for the ArgoCD Integration. Enabling SSO will allow users to authenticate to ArgoCD via Loft."
        },
        "virtualClusterInstance": {
          "description": "VirtualClusterInstance defines the name of *virtual cluster* (instance) that ArgoCD is deployed into. If provided, Cluster will be ignored and Loft will assume that ArgoCD is running in the specified virtual cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectPolicyRule": {
      "properties": {
        "action": {
          "description": "Action is one of \"*\", \"get\", \"create\", \"update\", \"delete\", \"sync\", or \"override\".",
          "type": "string"
        },
        "application": {
          "description": "Application is the ArgoCD project/repository to apply the rule to.",
          "type": "string"
        },
        "permission": {
          "description": "Allow applies the \"allow\" permission to the rule, if allow is not set, the permission will always be set to \"deny\".",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectRole": {
      "properties": {
        "description": {
          "description": "Description to add to the ArgoCD project.",
          "type": "string"
        },
        "groups": {
          "description": "Groups is a list of OIDC group names to bind to the role.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the ArgoCD role to attach to the project.",
          "type": "string"
        },
        "rules": {
          "description": "Rules ist a list of policy rules to attach to the role.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectPolicyRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectSpec": {
      "properties": {
        "enabled": {
          "description": "Enabled indicates if the ArgoCD Project Integration is enabled for this project. Enabling this will cause Loft to create an appProject in ArgoCD that is associated with the Loft Project. When Project integration is enabled Loft will override the default assigned role set in the SSO integration spec.",
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectSpecMetadata",
          "description": "Metadata defines additional metadata to attach to the loft created project in ArgoCD."
        },
        "roles": {
          "description": "Roles is a list of roles that should be attached to the ArgoCD project. If roles are provided no loft default roles will be set. If no roles are provided *and* SSO is enabled, loft will configure sane default values.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectRole"
          },
          "type": "array"
        },
        "sourceRepos": {
          "description": "SourceRepos is a list of source repositories to attach/allow on the project, if not specified will be \"*\" indicating all source repositories.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoProjectSpecMetadata": {
      "properties": {
        "description": {
          "description": "Description to add to the ArgoCD project.",
          "type": "string"
        },
        "extraAnnotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "ExtraAnnotations are optional annotations that can be attached to the project in ArgoCD.",
          "type": "object"
        },
        "extraLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "ExtraLabels are optional labels that can be attached to the project in ArgoCD.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ArgoSSOSpec": {
      "properties": {
        "assignedRoles": {
          "description": "AssignedRoles is a list of roles to assign for users who authenticate via Loft -- by default this will be the `read-only` role. If any roles are provided this will override the default setting.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "enabled": {
          "description": "Enabled indicates if the ArgoCD SSO Integration is enabled for this project. Enabling this will cause Loft to configure SSO authentication via Loft in ArgoCD. If Projects are *not* enabled, all users associated with this Project will be assigned either the 'read-only' (default) role, *or* the roles set under the AssignedRoles field.",
          "type": "boolean"
        },
        "host": {
          "description": "Host defines the ArgoCD host address that will be used for OIDC authentication between loft and ArgoCD. If not specified OIDC integration will be skipped, but vclusters/spaces will still be synced to ArgoCD.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AutomaticImport": {
      "properties": {
        "virtualClusters": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AutomaticImportVirtualClusters",
          "description": "VirtualClusters defines automatic virtual cluster import options."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.AutomaticImportVirtualClusters": {
      "properties": {
        "enabled": {
          "description": "Enabled specifies if automatic virtual cluster import should be enabled for this project.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.Cluster": {
      "description": "Cluster holds the cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterAccountTemplateClusterStatus": {
      "properties": {
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster where the cluster account template was applied",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterRef": {
      "properties": {
        "cluster": {
          "description": "Cluster is the connected cluster the space will be created in",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace inside the connected cluster holding the space",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterRoleTemplateTemplate": {
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller."
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterSpec": {
      "description": "ClusterSpec holds the cluster specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SecretRef",
          "description": "Holds a reference to a secret that holds the kube config to access this cluster"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "If specified this name is displayed in the UI instead of the metadata name",
          "type": "string"
        },
        "local": {
          "description": "Local specifies if it is the local cluster that should be connected, when this is specified, config is optional",
          "type": "boolean"
        },
        "managementNamespace": {
          "description": "The namespace where the cluster components will be installed in",
          "type": "string"
        },
        "networkPeer": {
          "description": "NetworkPeer specifies if the cluster is connected via tailscale, when this is specified, config is optional",
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "unusable": {
          "description": "If unusable is true, no spaces or virtual clusters can be scheduled on this cluster.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterStatus": {
      "description": "ClusterStatus holds the user status",
      "properties": {
        "message": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ConstraintSpaceTemplate": {
      "description": "ConstraintSpaceTemplate defines properties how many spaces can be owned by the account and how they should be created",
      "properties": {
        "clusterRole": {
          "description": "This defines the cluster role that will be used for the rolebinding when creating a new space for the selected subjects",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The enforced metadata of the space to create. Currently, only annotations and labels are supported"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the space",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodProviderOption": {
      "properties": {
        "value": {
          "description": "Value of this option.",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodProviderOptionFrom",
          "description": "ValueFrom specifies a secret where this value should be taken from."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodProviderOptionFrom": {
      "properties": {
        "projectSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "ProjectSecretRef is the project secret to use for this value."
        },
        "sharedSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "SharedSecretRef is the shared secret to use for this value."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceProvider": {
      "properties": {
        "env": {
          "additionalProperties": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodProviderOption"
          },
          "description": "Env are environment options to set when using the provider.",
          "type": "object"
        },
        "name": {
          "description": "Name is the name of the provider. This can also be an url.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodProviderOption"
          },
          "description": "Options are the provider option values",
          "type": "object"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateDefinition": {
      "properties": {
        "provider": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceProvider",
          "description": "Provider holds the DevPod provider configuration"
        },
        "spaceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateRef",
          "description": "SpaceTemplate is the space that should get created for this DevPod. If this is specified, the Kubernetes provider will be selected automatically."
        },
        "virtualClusterTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateRef",
          "description": "VirtualClusterTemplate is the virtual cluster that should get created for this DevPod. If this is specified, the Kubernetes provider will be selected automatically."
        },
        "workspaceEnv": {
          "additionalProperties": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodProviderOption"
          },
          "description": "WorkspaceEnv are environment variables that should be available within the created workspace.",
          "type": "object"
        }
      },
      "required": [
        "provider"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateVersion": {
      "properties": {
        "parameters": {
          "description": "Parameters define additional app parameters that will set provider values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.DevPodWorkspaceTemplateDefinition",
          "description": "Template holds the DevPod template"
        },
        "version": {
          "description": "Version is the version. Needs to be in X.X.X format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.GroupResources": {
      "description": "GroupResources represents resource kinds in an API group.",
      "properties": {
        "group": {
          "description": "Group is the name of the API group that contains the resources. The empty string represents the core API group.",
          "type": "string"
        },
        "resourceNames": {
          "description": "ResourceNames is a list of resource instance names that the policy matches. Using this field requires Resources to be specified. An empty list implies that every instance of the resource is matched.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nAn empty list implies all resources and subresources in this API groups apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmChart": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "repository": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmChartRepository",
          "description": "Repository is the repository name of this chart"
        },
        "versions": {
          "description": "Versions holds all chart versions",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmChartRepository": {
      "properties": {
        "insecure": {
          "description": "Insecure specifies if the chart should be retrieved without TLS verification",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the name of the repository",
          "type": "string"
        },
        "password": {
          "description": "Password of the repository",
          "type": "string"
        },
        "url": {
          "description": "URL is the repository url",
          "type": "string"
        },
        "username": {
          "description": "Username of the repository",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmConfiguration": {
      "description": "HelmConfiguration holds the helm configuration",
      "properties": {
        "insecure": {
          "description": "Determines if the remote location uses an insecure TLS certificate.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the chart to deploy",
          "type": "string"
        },
        "password": {
          "description": "The password to use for the selected repository",
          "type": "string"
        },
        "repoUrl": {
          "description": "The repo url to use",
          "type": "string"
        },
        "username": {
          "description": "The username to use for the selected repository",
          "type": "string"
        },
        "values": {
          "description": "The additional helm values to use. Expected block string",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the chart to deploy",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmTask": {
      "properties": {
        "release": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmTaskRelease",
          "description": "Release holds the release information"
        },
        "rollbackRevision": {
          "description": "RollbackRevision is the revision to rollback to",
          "type": "string"
        },
        "type": {
          "description": "Type is the task type. Defaults to Upgrade",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmTaskRelease": {
      "properties": {
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.HelmReleaseConfig",
          "description": "Config is the helm config to use to deploy the release"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are additional labels for the helm release.",
          "type": "object"
        },
        "name": {
          "description": "Name is the name of the release",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the release, if empty will use the target namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.ImportVirtualClustersSpec": {
      "properties": {
        "roleMapping": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "RoleMapping indicates an optional role mapping from a rancher project role to a rancher cluster role. Map to an empty role to exclude users and groups with that role from being synced.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.KindSecretRef": {
      "description": "KindSecretRef is the reference to a secret containing the user password",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the api group of the secret",
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is the kind of the secret",
          "type": "string"
        },
        "secretName": {
          "type": "string"
        },
        "secretNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalClusterAccessTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata is the metadata of the cluster access object"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.LocalClusterAccessSpec",
          "description": "LocalClusterAccessSpec holds the spec of the cluster access in the cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalClusterRoleTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata is the metadata of the cluster role template object"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalClusterRoleTemplateSpec",
          "description": "LocalClusterRoleTemplateSpec holds the spec of the cluster role template in the cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalClusterRoleTemplateSpec": {
      "properties": {
        "clusterRoleTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterRoleTemplateTemplate",
          "description": "ClusterRoleTemplate holds the cluster role template"
        },
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalSpaceConstraintSpec": {
      "properties": {
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        },
        "spaceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ConstraintSpaceTemplate",
          "description": "SpaceTemplate holds the space configuration"
        },
        "sync": {
          "description": "Sync specifies if spaces that were created through this space constraint object should get synced with this object.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalSpaceConstraintTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata is the metadata of the space constraint object"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.LocalSpaceConstraintSpec",
          "description": "LocalSpaceConstraintSpec holds the spec of the space constraint in the cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.Member": {
      "properties": {
        "clusterRole": {
          "description": "ClusterRole is the assigned role for the above member",
          "type": "string"
        },
        "group": {
          "description": "Group of the member. Currently only supports storage.loft.sh",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the kind of the member. Currently either User or Team",
          "type": "string"
        },
        "name": {
          "description": "Name of the member",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.NamespacePattern": {
      "properties": {
        "space": {
          "description": "Space holds the namespace pattern to use for space instances",
          "type": "string"
        },
        "virtualCluster": {
          "description": "VirtualCluster holds the namespace pattern to use for virtual cluster instances",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatus": {
      "properties": {
        "project": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusProject",
          "description": "Project is the quota status for the whole project"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusUser",
          "description": "User is the quota status for each user / team. An example status could look like this: status:\n  quotas:\n    user:\n      limit:\n        pods: \"10\"\n        spaces: \"5\"\n      users:\n        admin:\n          used:\n            spaces: \"3\"  # <- calculated in our apiserver\n            pods: \"8\"    # <- the sum calculated from clusters\n      clusters:\n        cluster-1:  # <- populated by agent from cluster-1\n          users:\n            admin:\n              pods: \"3\"\n        cluster-2:\n          users:\n            admin:\n              pods: \"5\""
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusProject": {
      "properties": {
        "clusters": {
          "additionalProperties": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusProjectCluster"
          },
          "description": "Clusters holds the used amount per cluster. Maps cluster name to used resources",
          "type": "object"
        },
        "limit": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Limit is the amount limited, copied from spec.quotas.project",
          "type": "object"
        },
        "used": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Used is the amount currently used across all clusters",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusProjectCluster": {
      "properties": {
        "used": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Used is the amount currently used. Maps resource name, such as pods, to their used amount.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusUser": {
      "properties": {
        "clusters": {
          "additionalProperties": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusUserUsed"
          },
          "description": "Clusters holds the used amount per cluster. Maps cluster name to used resources",
          "type": "object"
        },
        "limit": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Limit is the amount limited per user / team",
          "type": "object"
        },
        "used": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusUserUsed",
          "description": "Used is the used amount per user / team"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.QuotaStatusUserUsed": {
      "properties": {
        "teams": {
          "additionalProperties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "description": "Teams is a mapping of teams to used resources",
          "type": "object"
        },
        "users": {
          "additionalProperties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "description": "Users is a mapping of users to used resources",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.Quotas": {
      "properties": {
        "project": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Project holds the quotas for the whole project",
          "type": "object"
        },
        "user": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User holds the quotas per user / team",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RancherIntegrationSpec": {
      "properties": {
        "enabled": {
          "description": "Enabled indicates if the Rancher Project Integration is enabled for this project.",
          "type": "boolean"
        },
        "importVirtualClusters": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ImportVirtualClustersSpec",
          "description": "ImportVirtualClusters defines settings to import virtual clusters to Rancher on creation"
        },
        "projectRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RancherProjectRef",
          "description": "ProjectRef defines references to rancher project, required for syncMembers and syncVirtualClusters.syncMembers"
        },
        "syncMembers": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SyncMembersSpec",
          "description": "SyncMembers defines settings to sync Rancher project members to the loft project"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RancherProjectRef": {
      "properties": {
        "cluster": {
          "description": "Cluster defines the Rancher cluster ID Needs to be the same id within Loft",
          "type": "string"
        },
        "project": {
          "description": "Project defines the Rancher project ID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RequireTemplate": {
      "properties": {
        "disabled": {
          "description": "If true, all users within the project will be allowed to create a new instance without a template. By default, only admins are allowed to create a new instance without a template.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerClusterRef": {
      "properties": {
        "cluster": {
          "description": "Cluster is the connected cluster the space will be created in",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace inside the connected cluster holding the space",
          "type": "string"
        },
        "persistentVolumeClaimTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPersistentVolumeClaimTemplate",
          "description": "PersistentVolumeClaimTemplate holds additional options for the persistent volume claim"
        },
        "podTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPodTemplate",
          "description": "PodTemplate holds additional options for the runner pod"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPersistentVolumeClaimTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "Metadata holds the template metadata"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPersistentVolumeClaimTemplateSpec",
          "description": "Spec holds the template spec"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPersistentVolumeClaimTemplateSpec": {
      "properties": {
        "accessModes": {
          "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "storageClassName": {
          "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "storageSize": {
          "description": "storageSize is the size of the storage to reserve for the pvc",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPodTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "Metadata holds the template metadata"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPodTemplateSpec",
          "description": "Spec holds the template spec"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerPodTemplateSpec": {
      "properties": {
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "Set the Affinity for the Runner Pod"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "hostAliases": {
          "description": "Set host aliases for the Runner Pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array"
        },
        "image": {
          "description": "Runner pod image to use other than default",
          "type": "string"
        },
        "initContainers": {
          "description": "Set up Init Containers for the Runner",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Set the NodeSelector for the Runner Pod",
          "type": "object"
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources requirements"
        },
        "tolerations": {
          "description": "Set the Tolerations for the Runner Pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "volumeMounts": {
          "description": "Set Volume Mounts for the Runner Pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array"
        },
        "volumes": {
          "description": "Set Volumes for the Runner Pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.RunnerRef": {
      "properties": {
        "runner": {
          "description": "Runner is the connected runner the workspace will be created in",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.SecretRef": {
      "description": "SecretRef is the reference to a secret containing the user password",
      "properties": {
        "key": {
          "type": "string"
        },
        "secretName": {
          "type": "string"
        },
        "secretNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceCreationTask": {
      "properties": {
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata of the space"
        },
        "objects": {
          "description": "Objects are objects to put into the space",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner defines the space owner"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceInstanceTemplateDefinition": {
      "description": "SpaceInstanceTemplateDefinition holds the space instance template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "The space instance metadata"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateDefinition": {
      "properties": {
        "access": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccess",
          "description": "The space access"
        },
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "charts": {
          "description": "Charts are helm charts that should get deployed",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.TemplateHelmChart"
          },
          "type": "array"
        },
        "instanceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceInstanceTemplateDefinition",
          "description": "InstanceTemplate holds the space instance template"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "The space metadata"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateVersion": {
      "properties": {
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceTemplateDefinition",
          "description": "Template holds the space template"
        },
        "version": {
          "description": "Version is the version. Needs to be in X.X.X format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.StreamContainer": {
      "properties": {
        "container": {
          "description": "Container is the container name to use",
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for pods. The newest matching pod will be used to stream logs from"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.SyncMembersSpec": {
      "properties": {
        "enabled": {
          "description": "Enabled indicates whether to sync rancher project members to the loft project.",
          "type": "boolean"
        },
        "roleMapping": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "RoleMapping indicates an optional role mapping from a rancher role to a loft role. Map to an empty role to exclude users and groups with that role from being synced.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.Target": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetCluster",
          "description": "Cluster defines a connected cluster as target"
        },
        "spaceInstance": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetInstance",
          "description": "SpaceInstance defines a space instance as target"
        },
        "virtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetVirtualCluster",
          "description": "VirtualCluster defines a virtual cluster as target"
        },
        "virtualClusterInstance": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetInstance",
          "description": "VirtualClusterInstance defines a virtual cluster instance as target"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetCluster": {
      "properties": {
        "cluster": {
          "description": "Cluster is the cluster where the task should get executed",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace where the task should get executed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetInstance": {
      "properties": {
        "name": {
          "description": "Name is the name of the instance",
          "type": "string"
        },
        "project": {
          "description": "Project where the instance is in",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.TargetVirtualCluster": {
      "properties": {
        "cluster": {
          "description": "Cluster is the cluster where the virtual cluster lies",
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual cluster",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace where the virtual cluster is located",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.TaskDefinition": {
      "properties": {
        "appTask": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppTask",
          "description": "AppTask is an app task"
        },
        "helm": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.HelmTask",
          "description": "HelmTask executes a helm command"
        },
        "spaceCreation": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceCreationTask",
          "description": "SpaceCreationTask creates a new space"
        },
        "virtualClusterCreation": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterCreationTask",
          "description": "VirtualClusterCreationTask creates a new virtual cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are annotations on the object",
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are labels on the object",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateRef": {
      "properties": {
        "name": {
          "description": "Name holds the name of the template to reference.",
          "type": "string"
        },
        "syncOnce": {
          "description": "SyncOnce tells the controller to sync the instance once with the template. This is useful if you want to sync an instance after a template was changed. To automatically sync an instance with a template, use 'x.x.x' as version instead.",
          "type": "boolean"
        },
        "version": {
          "description": "Version holds the template version to use. Version is expected to be in semantic versioning format. Alternatively, you can also exchange major, minor or patch with an 'x' to tell Loft to automatically select the latest major, minor or patch version.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplate": {
      "properties": {
        "accountName": {
          "description": "AccountName is the name of the account that should be created. Defaults to the user or team kubernetes name.",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster account template to apply",
          "type": "string"
        },
        "sync": {
          "description": "Sync defines if Loft should sync changes to the cluster account template to the cluster accounts and create new accounts if new clusters match the templates.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserClusterAccountTemplateStatus": {
      "properties": {
        "clusters": {
          "description": "Clusters holds the cluster on which this template was applied",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.ClusterAccountTemplateClusterStatus"
          },
          "type": "array"
        },
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster account template that was applied",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam": {
      "properties": {
        "team": {
          "description": "Team specifies a Loft team.",
          "type": "string"
        },
        "user": {
          "description": "User specifies a Loft user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VaultAuthSpec": {
      "properties": {
        "token": {
          "description": "Token defines the token to use for authentication.",
          "type": "string"
        },
        "tokenSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "TokenSecretRef defines the Kubernetes secret to use for token authentication. Will be used if `token` is not provided.\n\nSecret data should contain the `token` key."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VaultIntegrationSpec": {
      "properties": {
        "address": {
          "description": "Address defines the address of the Vault instance to use for this project. Will default to the `VAULT_ADDR` environment variable if not provided.",
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VaultAuthSpec",
          "description": "Auth defines the authentication method to use for this project."
        },
        "enabled": {
          "description": "Enabled indicates if the Vault Integration is enabled for the project -- this knob only enables the syncing of secrets to or from Vault, but does not setup Kubernetes authentication methods or Kubernetes secrets engines for vclusters.",
          "type": "boolean"
        },
        "namespace": {
          "description": "Namespace defines the namespace to use when storing secrets in Vault.",
          "type": "string"
        },
        "skipTLSVerify": {
          "description": "SkipTLSVerify defines if TLS verification should be skipped when connecting to Vault.",
          "type": "boolean"
        },
        "syncInterval": {
          "description": "SyncInterval defines the interval at which to sync secrets from Vault. Defaults to `1m.` See https://pkg.go.dev/time#ParseDuration for supported formats.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterClusterRef": {
      "properties": {
        "cluster": {
          "description": "Cluster is the connected cluster the space will be created in",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace inside the connected cluster holding the space",
          "type": "string"
        },
        "virtualCluster": {
          "description": "VirtualCluster is the name of the virtual cluster inside the namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterCreationTask": {
      "properties": {
        "access": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccess",
          "description": "The virtual cluster access"
        },
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "The helm release configuration for the virtual cluster."
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The virtual cluster metadata"
        },
        "objects": {
          "description": "Objects is the optional objects configuration for the virtual cluster",
          "type": "string"
        },
        "spaceCreation": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.SpaceCreationTask",
          "description": "SpaceCreationTask creates a new space if defined for the virtual cluster"
        },
        "wait": {
          "description": "Wait defines if the task should wait until the virtual cluster is ready",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterInstanceTemplateDefinition": {
      "description": "VirtualClusterInstanceTemplateDefinition holds the virtual cluster instance template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "The virtual cluster instance metadata"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterSpaceTemplateDefinition": {
      "properties": {
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "charts": {
          "description": "Charts are helm charts that should get deployed",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.TemplateHelmChart"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "The space metadata"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the virtual cluster namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplate": {
      "description": "VirtualClusterTemplate holds the virtualClusterTemplate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateDefinition": {
      "properties": {
        "access": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.InstanceAccess",
          "description": "Access defines the access of users and teams to the virtual cluster."
        },
        "accessPoint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterAccessPoint",
          "description": "AccessPoint defines settings to expose the virtual cluster directly via an ingress rather than through the (default) Loft proxy"
        },
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.AppReference"
          },
          "type": "array"
        },
        "charts": {
          "description": "Charts are helm charts that should get deployed",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.TemplateHelmChart"
          },
          "type": "array"
        },
        "forwardToken": {
          "description": "ForwardToken signals the proxy to pass through the used token to the virtual Kubernetes api server and do a TokenReview there.",
          "type": "boolean"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "HelmRelease is the helm release configuration for the virtual cluster."
        },
        "instanceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterInstanceTemplateDefinition",
          "description": "InstanceTemplate holds the virtual cluster instance template"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "The virtual cluster metadata"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
          "type": "string"
        },
        "pro": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterProSpec",
          "description": "Pro defines the pro settings for the virtual cluster"
        },
        "spaceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterSpaceTemplateDefinition",
          "description": "SpaceTemplate holds the space template"
        },
        "workloadVirtualClusterTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.WorkloadVirtualClusterTemplateDefinition",
          "description": "WorkloadVirtualClusterTemplateDefinition holds the workload cluster specific deployment options. Needs to be non-nil in order to deploy the virtual cluster in workload cluster mode."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef": {
      "properties": {
        "name": {
          "description": "Name of the space template",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateSpec": {
      "description": "VirtualClusterTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the virtual cluster template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "spaceTemplateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef",
          "description": "DEPRECATED: SpaceTemplate to use to create the virtual cluster space if it does not exist"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "Template holds the virtual cluster template"
        },
        "versions": {
          "description": "Versions are different versions of the template that can be referenced as well",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateStatus": {
      "description": "VirtualClusterTemplateStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateVersion": {
      "properties": {
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "Template holds the space template"
        },
        "version": {
          "description": "Version is the version. Needs to be in X.X.X format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.storage.v1.WorkloadVirtualClusterTemplateDefinition": {
      "properties": {
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "HelmRelease is the helm release configuration for the virtual cluster."
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.TemplateMetadata",
          "description": "The virtual cluster metadata"
        },
        "spaceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.storage.v1.VirtualClusterSpaceTemplateDefinition",
          "description": "SpaceTemplate holds the space template"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.ui.v1.NavBarButton": {
      "properties": {
        "icon": {
          "description": "Icon holds the url of the icon to display",
          "type": "string"
        },
        "link": {
          "description": "Link holds the link of the navbar button",
          "type": "string"
        },
        "position": {
          "description": "Position holds the position of the button, can be one of: TopStart, TopEnd, BottomStart, BottomEnd. Defaults to BottomEnd",
          "type": "string"
        },
        "text": {
          "description": "Text holds text for the button",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettings": {
      "description": "UISettings holds the loft ui configuration settings",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettingsSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettingsStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettingsConfig": {
      "properties": {
        "accentColor": {
          "description": "AccentColor is the color value (ex: \"#12345\") to use for the accent",
          "type": "string"
        },
        "customCss": {
          "description": "CustomCSS holds URLs with custom css files that should be included when loading the UI",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customJavaScript": {
          "description": "CustomJavaScript holds URLs with custom js files that should be included when loading the UI",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "legalTemplate": {
          "description": "LegalTemplate is a text (html) string containing the legal template to prompt to users when authenticating to Loft",
          "type": "string"
        },
        "loftVersion": {
          "description": "LoftVersion holds the current loft version",
          "type": "string"
        },
        "logoBackgroundColor": {
          "description": "LogoBackgroundColor is the color value (ex: \"#12345\") to use as the background color for the logo",
          "type": "string"
        },
        "logoURL": {
          "description": "LogoURL is url pointing to the logo to use in the Loft UI. This path must be accessible for clients accessing the Loft UI!",
          "type": "string"
        },
        "navBarButtons": {
          "description": "NavBarButtons holds extra nav bar buttons",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.ui.v1.NavBarButton"
          },
          "type": "array"
        },
        "primaryColor": {
          "description": "PrimaryColor is the color value (ex: \"#12345\") to use as the primary color",
          "type": "string"
        },
        "sidebarColor": {
          "description": "SidebarColor is the color value (ex: \"#12345\") to use for the sidebar",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettingsSpec": {
      "description": "UISettingsSpec holds the specification",
      "properties": {
        "accentColor": {
          "description": "AccentColor is the color value (ex: \"#12345\") to use for the accent",
          "type": "string"
        },
        "customCss": {
          "description": "CustomCSS holds URLs with custom css files that should be included when loading the UI",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customJavaScript": {
          "description": "CustomJavaScript holds URLs with custom js files that should be included when loading the UI",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "legalTemplate": {
          "description": "LegalTemplate is a text (html) string containing the legal template to prompt to users when authenticating to Loft",
          "type": "string"
        },
        "loftVersion": {
          "description": "LoftVersion holds the current loft version",
          "type": "string"
        },
        "logoBackgroundColor": {
          "description": "LogoBackgroundColor is the color value (ex: \"#12345\") to use as the background color for the logo",
          "type": "string"
        },
        "logoURL": {
          "description": "LogoURL is url pointing to the logo to use in the Loft UI. This path must be accessible for clients accessing the Loft UI!",
          "type": "string"
        },
        "navBarButtons": {
          "description": "NavBarButtons holds extra nav bar buttons",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.ui.v1.NavBarButton"
          },
          "type": "array"
        },
        "primaryColor": {
          "description": "PrimaryColor is the color value (ex: \"#12345\") to use as the primary color",
          "type": "string"
        },
        "productName": {
          "description": "Name is the name of the product",
          "type": "string"
        },
        "sidebarColor": {
          "description": "SidebarColor is the color value (ex: \"#12345\") to use for the sidebar",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.ui.v1.UISettingsStatus": {
      "description": "UISettingsStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmRelease": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmRelease"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmReleaseList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are extra annotations for this helm release",
          "type": "object"
        },
        "bash": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Bash",
          "description": "Bash holds the bash script to execute in a container in the target"
        },
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        },
        "manifests": {
          "description": "Manifests holds kube manifests that will be deployed as a chart",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm chart values that will get merged with config and are then used to deploy the helm chart.",
          "type": "string"
        },
        "values": {
          "description": "Values is the set of extra Values added to the chart. These values merge with the default values inside of the chart. You can use golang templating in here with values from parameters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseStatus": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Info",
          "description": "Info provides information about a release"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v3.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "version": {
          "description": "Revision is an int which represents the revision of the release.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.Condition": {
      "description": "Condition defines an observation of a Cluster API resource operational state.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable."
        },
        "message": {
          "description": "A human readable message indicating details about the transition. This field may be empty.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.",
          "type": "string"
        },
        "severity": {
          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicy": {
      "description": "JsPolicy holds the webhook configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicySpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundle": {
      "description": "JsPolicyBundle holds the bundled payload",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleSpec": {
      "properties": {
        "bundle": {
          "description": "Bundle holds the bundled payload (including dependencies and minified javascript code)",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleStatus": {
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicySpec": {
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "auditLogSize": {
          "description": "AuditLogSize defines how many violations should be logged in the status. Defaults to 10",
          "format": "int32",
          "type": "integer"
        },
        "auditPolicy": {
          "description": "AuditPolicy defines if violations should be logged to the webhook status or not. By default, violations will be logged to the CRD status.",
          "type": "string"
        },
        "dependencies": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Dependencies is a map of npm modules this webhook should be bundled with",
          "type": "object"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\nPossible enum values:\n - `\"Fail\"` means that an error calling the webhook causes the admission to fail.\n - `\"Ignore\"` means that an error calling the webhook is ignored.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "javascript": {
          "description": "JavaScript is the payload of the webhook that will be executed. If this is not defined, jsPolicy expects the user to create a JsPolicyBundle for this policy.",
          "type": "string"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"\n\nPossible enum values:\n - `\"Equivalent\"` means requests should be sent to the webhook if they modify a resource listed in rules via another API group or version.\n - `\"Exact\"` means requests should only be sent to the webhook if they exactly match a given rule.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "Type defines what kind of policy the object represents. Valid values are Validating, Mutating and Controller. Defaults to Validating.",
          "type": "string"
        },
        "violationPolicy": {
          "description": "Violation policy describes how violations should be handled. You can either specify deny (which is the default), warn or dry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyStatus": {
      "properties": {
        "bundleHash": {
          "description": "BundleHash is used to determine if we have to re-bundle the javascript",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.Condition"
          },
          "type": "array"
        },
        "message": {
          "description": "Message describes the error in human-readable language if the webhook is in a failed state",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "phase": {
          "description": "Phase describes how the syncing status of the webhook is",
          "type": "string"
        },
        "reason": {
          "description": "Reason holds the error in machine-readable language if the webhook is in a failed state",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolations": {
      "description": "JsPolicyViolations holds the webhook configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsSpec": {
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsStatus": {
      "properties": {
        "violations": {
          "description": "Violations is an array of violations that were recorded by the webhook",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation": {
      "properties": {
        "action": {
          "description": "Action holds the the action type the webhook reacted with",
          "type": "string"
        },
        "code": {
          "description": "Code is the error code that was returned to the client",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "Message holds the message that was sent to the client",
          "type": "string"
        },
        "reason": {
          "description": "Reason is the error reason that was returned to the client",
          "type": "string"
        },
        "requestInfo": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.RequestInfo",
          "description": "The request this violation is about"
        },
        "timestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The timestamp when this violation has occurred"
        },
        "userInfo": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.UserInfo",
          "description": "The user that sent the request"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.RequestInfo": {
      "properties": {
        "apiVersion": {
          "description": "Kind is the type of object being submitted (for example, Pod or Deployment)",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of object being submitted (for example, Pod or Deployment)",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the object as presented in the request. On a CREATE operation, the client may omit name and rely on the server to generate the name. If that is the case, this field will contain an empty string.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace associated with the request (if any).",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the operation being performed. This may be different than the operation requested. e.g. a patch can result in either a CREATE or UPDATE Operation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.UserInfo": {
      "properties": {
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Any additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "properties": {
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
          "description": "Describes node affinity scheduling rules for the pod."
        },
        "podAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n\nPossible enum values:\n - `\"None\"`\n - `\"ReadOnly\"`\n - `\"ReadWrite\"`",
          "enum": [
            "None",
            "ReadOnly",
            "ReadWrite"
          ],
          "type": "string"
        },
        "diskName": {
          "description": "diskName is the Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "diskURI is the URI of data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared\n\nPossible enum values:\n - `\"Dedicated\"`\n - `\"Managed\"`\n - `\"Shared\"`",
          "enum": [
            "Dedicated",
            "Managed",
            "Shared"
          ],
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "shareName is the azure share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
        },
        "readOnly": {
          "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ClaimSource": {
      "description": "ClaimSource describes a reference to a ResourceClaim.\n\nExactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.",
      "properties": {
        "resourceClaimName": {
          "description": "ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.",
          "type": "string"
        },
        "resourceClaimTemplateName": {
          "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resizePolicy": {
          "description": "Resources resize policy for the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        },
        "restartPolicy": {
          "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
          "format": "int32",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "containerPort"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerResizePolicy": {
      "description": "ContainerResizePolicy represents resource resize policy for the container.",
      "properties": {
        "resourceName": {
          "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
          "type": "string"
        },
        "restartPolicy": {
          "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
          "type": "string"
        }
      },
      "required": [
        "resourceName",
        "restartPolicy"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "properties": {
        "running": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning",
          "description": "Details about a running container"
        },
        "terminated": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated",
          "description": "Details about a terminated container"
        },
        "waiting": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting",
          "description": "Details about a waiting container"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "properties": {
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container was last (re-)started"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format '<type>://<container_id>'",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "finishedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container last terminated"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which previous execution of the container started"
        }
      },
      "required": [
        "exitCode"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "properties": {
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.",
          "type": "object"
        },
        "containerID": {
          "description": "ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\").",
          "type": "string"
        },
        "image": {
          "description": "Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.",
          "type": "string"
        },
        "imageID": {
          "description": "ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.",
          "type": "string"
        },
        "lastState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0."
        },
        "name": {
          "description": "Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to accept traffic.",
          "type": "boolean"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized."
        },
        "restartCount": {
          "description": "RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.",
          "format": "int32",
          "type": "integer"
        },
        "started": {
          "description": "Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.",
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "State holds details about the container's current condition."
        }
      },
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
          "description": "The ConfigMap to select from"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
          "description": "The Secret to select from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if value is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralContainer": {
      "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Lifecycle is not allowed for ephemeral containers."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Probes are not allowed for ephemeral containers."
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
          "type": "string"
        },
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Probes are not allowed for ephemeral containers."
        },
        "resizePolicy": {
          "description": "Resources resize policy for the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod."
        },
        "restartPolicy": {
          "description": "Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext."
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Probes are not allowed for ephemeral containers."
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
          "type": "string"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "properties": {
        "volumeClaimTemplate": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate",
          "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "lun is Optional: FC target lun number",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "format": "int32",
          "type": "integer"
        },
        "pdName": {
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GRPCAction": {
      "properties": {
        "port": {
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
          "format": "int32",
          "type": "integer"
        },
        "service": {
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "repository is the URL",
          "type": "string"
        },
        "revision": {
          "description": "revision is the commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
          "enum": [
            "HTTP",
            "HTTPS"
          ],
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "properties": {
        "name": {
          "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostIP": {
      "description": "HostIP represents a single IP address allocated to the host.",
      "properties": {
        "ip": {
          "description": "IP is the IP address assigned to the host",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n\nPossible enum values:\n - `\"\"` For backwards compatible, leave it empty if unset\n - `\"BlockDevice\"` A block device must exist at the given path\n - `\"CharDevice\"` A character device must exist at the given path\n - `\"Directory\"` A directory must exist at the given path\n - `\"DirectoryOrCreate\"` If nothing exists at the given path, an empty directory will be created there as needed with file mode 0755, having the same group and ownership with Kubelet.\n - `\"File\"` A file must exist at the given path\n - `\"FileOrCreate\"` If nothing exists at the given path, an empty file will be created there as needed with file mode 0644, having the same group and ownership with Kubelet.\n - `\"Socket\"` A UNIX socket must exist at the given path",
          "enum": [
            "",
            "BlockDevice",
            "CharDevice",
            "Directory",
            "DirectoryOrCreate",
            "File",
            "FileOrCreate",
            "Socket"
          ],
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "iqn is the target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "lun represents iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "properties": {
        "key": {
          "description": "key is the key to project.",
          "type": "string"
        },
        "mode": {
          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        },
        "preStop": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LifecycleHandler": {
      "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "Exec specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"Gt\"`\n - `\"In\"`\n - `\"Lt\"`\n - `\"NotIn\"`",
          "enum": [
            "DoesNotExist",
            "Exists",
            "Gt",
            "In",
            "Lt",
            "NotIn"
          ],
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "required": [
        "fieldPath"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource."
        },
        "dataSourceRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedObjectReference",
          "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "selector is a label query over volumes to consider for binding."
        },
        "storageClassName": {
          "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.\n\nPossible enum values:\n - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.\n - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.",
          "enum": [
            "Block",
            "Filesystem"
          ],
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "pdID is the ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Pod": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec",
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus",
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of resources, in this case pods."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces."
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "PodCondition contains details for the current condition of this pod.",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodIP": {
      "description": "PodIP represents a single IP address allocated to the pod.",
      "properties": {
        "ip": {
          "description": "IP is the IP address assigned to the pod",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodOS": {
      "description": "PodOS defines the OS parameters of a pod.",
      "properties": {
        "name": {
          "description": "Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "PodReadinessGate contains the reference to a pod condition",
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      },
      "required": [
        "conditionType"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodResourceClaim": {
      "description": "PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.",
      "properties": {
        "name": {
          "description": "Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ClaimSource",
          "description": "Source describes where to find the ResourceClaim."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodResourceClaimStatus": {
      "description": "PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.",
      "properties": {
        "name": {
          "description": "Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.",
          "type": "string"
        },
        "resourceClaimName": {
          "description": "ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSchedulingGate": {
      "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.",
      "properties": {
        "name": {
          "description": "Name of the scheduling gate. Each scheduling gate must have a unique name field.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Always\"` indicates that volume's ownership and permissions should always be changed whenever volume is mounted inside a Pod. This the default behavior.\n - `\"OnRootMismatch\"` indicates that volume's ownership and permissions will be changed only when permission and ownership of root directory does not match with expected permissions on the volume. This can help shorten the time it takes to change ownership and permissions of a volume.",
          "enum": [
            "Always",
            "OnRootMismatch"
          ],
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec": {
      "description": "PodSpec is a description of a pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "format": "int64",
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy."
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\nPossible enum values:\n - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.\n - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostUsers": {
          "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "os": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodOS",
          "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
          "type": "object"
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n\nPossible enum values:\n - `\"Never\"` means that pod never preempts other pods with lower priority.\n - `\"PreemptLowerPriority\"` means that pod can preempt other pods with lower priority.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "resourceClaims": {
          "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaim"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n\nPossible enum values:\n - `\"Always\"`\n - `\"Never\"`\n - `\"OnFailure\"`",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "schedulingGates": {
          "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\nThis is a beta feature enabled by the PodSchedulingReadiness feature gate.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodSchedulingGate"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodStatus": {
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
      "properties": {
        "conditions": {
          "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "ephemeralContainerStatuses": {
          "description": "Status for any ephemeral containers that have run in this pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "hostIP": {
          "description": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod",
          "type": "string"
        },
        "hostIPs": {
          "description": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostIP"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainerStatuses": {
          "description": "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "message": {
          "description": "A human readable message indicating details about why the pod is in this condition.",
          "type": "string"
        },
        "nominatedNodeName": {
          "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
          "type": "string"
        },
        "phase": {
          "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n\nPossible enum values:\n - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).\n - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.\n - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.\n - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.\n - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)",
          "enum": [
            "Failed",
            "Pending",
            "Running",
            "Succeeded",
            "Unknown"
          ],
          "type": "string"
        },
        "podIP": {
          "description": "podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
          "type": "string"
        },
        "podIPs": {
          "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodIP"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "qosClass": {
          "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes\n\nPossible enum values:\n - `\"BestEffort\"` is the BestEffort qos class.\n - `\"Burstable\"` is the Burstable qos class.\n - `\"Guaranteed\"` is the Guaranteed qos class.",
          "enum": [
            "BestEffort",
            "Burstable",
            "Guaranteed"
          ],
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
          "type": "string"
        },
        "resize": {
          "description": "Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"",
          "type": "string"
        },
        "resourceClaimStatuses": {
          "description": "Status of resource claims.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaimStatus"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "properties": {
        "fsType": {
          "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "Exec specifies the action to take."
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "grpc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction",
          "description": "GRPC specifies an action involving a GRPC port."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port."
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "format": "int64",
          "type": "integer"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "description": "sources is the list of volume projections",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "user to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceClaim": {
      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
      "properties": {
        "name": {
          "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Specifies the output format of the exposed resources, defaults to \"1\""
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        },
        "scopeSelector": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector",
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched."
        },
        "scopes": {
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        },
        "used": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "claims": {
          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceClaim"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"In\"`\n - `\"NotIn\"`",
          "enum": [
            "DoesNotExist",
            "Exists",
            "In",
            "NotIn"
          ],
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.\n\nPossible enum values:\n - `\"BestEffort\"` Match all pod objects that have best effort quality of service\n - `\"CrossNamespacePodAffinity\"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned.\n - `\"NotBestEffort\"` Match all pod objects that do not have best effort quality of service\n - `\"NotTerminating\"` Match all pod objects where spec.activeDeadlineSeconds is nil\n - `\"PriorityClass\"` Match all pod objects that have priority class mentioned\n - `\"Terminating\"` Match all pod objects where spec.activeDeadlineSeconds >=0",
          "enum": [
            "BestEffort",
            "CrossNamespacePodAffinity",
            "NotBestEffort",
            "NotTerminating",
            "PriorityClass",
            "Terminating"
          ],
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "scopeName",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SeccompProfile": {
      "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\nPossible enum values:\n - `\"Localhost\"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.\n - `\"RuntimeDefault\"` represents the default container runtime seccomp profile.\n - `\"Unconfined\"` indicates no seccomp profile is applied (A.K.A. unconfined).",
          "enum": [
            "Localhost",
            "RuntimeDefault",
            "Unconfined"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Default\"` uses the container runtime defaults for readonly and masked paths for /proc. Most container runtimes mask certain paths in /proc to avoid accidental security exposure of special devices or information.\n - `\"Unmasked\"` bypasses the default masking behavior of the container runtime and ensures the newly created /proc the container stays in tact with no modifications.",
          "enum": [
            "Default",
            "Unmasked"
          ],
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows."
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "properties": {
        "audience": {
          "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "description": "path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "Sysctl defines a kernel parameter to be set",
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\nPossible enum values:\n - `\"Equal\"`\n - `\"Exists\"`",
          "enum": [
            "Equal",
            "Exists"
          ],
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "format": "int32",
          "type": "integer"
        },
        "minDomains": {
          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "nodeAffinityPolicy": {
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\nPossible enum values:\n - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.\n - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.",
          "enum": [
            "Honor",
            "Ignore"
          ],
          "type": "string"
        },
        "nodeTaintsPolicy": {
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\nPossible enum values:\n - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.\n - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.",
          "enum": [
            "Honor",
            "Ignore"
          ],
          "type": "string"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\nPossible enum values:\n - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when constraints are not satisfied.\n - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if constraints are not satisfied.",
          "enum": [
            "DoNotSchedule",
            "ScheduleAnyway"
          ],
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.TypedObjectReference": {
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
          "description": "configMap represents a configMap that should populate this volume"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
          "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
          "description": "downwardAPI represents downward API about the pod that should populate this volume"
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        },
        "ephemeral": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource",
          "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "gitRepo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
          "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
          "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
        },
        "name": {
          "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
          "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "projected": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
          "description": "projected items for all in one resources secrets, configmaps, and downward API"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
          "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
          "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.\n\nPossible enum values:\n - `\"Bidirectional\"` means that the volume in a container will receive new mounts from the host or other containers, and its own mounts will be propagated from the container to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rshared\" in Linux terminology).\n - `\"HostToContainer\"` means that the volume in a container will receive new mounts from the host or other containers, but filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rslave\" in Linux terminology).\n - `\"None\"` means that the volume in a container will not receive new mounts from the host or other containers, and filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode corresponds to \"private\" in Linux terminology.",
          "enum": [
            "Bidirectional",
            "HostToContainer",
            "None"
          ],
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
          "description": "configMap information about the configMap data to project"
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
          "description": "downwardAPI information about the downwardAPI data to project"
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
          "description": "secret information about the secret data to project"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
          "description": "serviceAccountToken is information about the serviceAccountToken data to project"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "Represents a vSphere volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "volumePath is the path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
          "type": "string"
        },
        "hostProcess": {
          "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
          "type": "boolean"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the group.",
          "type": "string"
        },
        "preferredVersion": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery",
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version."
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "type": "array"
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "versions"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string"
        },
        "name": {
          "description": "name is the plural name of the resource.",
          "type": "string"
        },
        "namespaced": {
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singularName": {
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      },
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groupVersion": {
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          },
          "type": "array"
        }
      },
      "required": [
        "groupVersion",
        "resources"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "format": "int64",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "orphanDependents": {
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "type": "boolean"
        },
        "preconditions": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions",
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned."
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "virtualcluster.loft.sh",
          "kind": "DeleteOptions",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "description": "MicroTime is version of Time with microsecond level precision.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "properties": {
        "resourceVersion": {
          "description": "Specifies the target ResourceVersion",
          "type": "string"
        },
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type."
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          },
          "type": "array"
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "description": "Event represents a single event to a watched resource.",
      "properties": {
        "object": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context."
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "object"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "virtualcluster.loft.sh",
          "kind": "WatchEvent",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.runtime.Unknown": {
      "description": "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
      "properties": {
        "ContentEncoding": {
          "description": "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
          "type": "string"
        },
        "ContentType": {
          "description": "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      },
      "required": [
        "ContentEncoding",
        "ContentType"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "description": "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
      "format": "int-or-string",
      "type": "string"
    }
  },
  "info": {
    "title": "Api",
    "version": "unversioned"
  },
  "parameters": {
    "allowWatchBookmarks-HC2hJt-J": {
      "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
      "in": "query",
      "name": "allowWatchBookmarks",
      "type": "boolean",
      "uniqueItems": true
    },
    "body-2Y1dVQaQ": {
      "in": "body",
      "name": "body",
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      }
    },
    "body-78PwaGsr": {
      "in": "body",
      "name": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      }
    },
    "container-C23hHG_w": {
      "in": "query",
      "name": "container",
      "type": "string",
      "uniqueItems": true
    },
    "continue-QfD61s0i": {
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "in": "query",
      "name": "continue",
      "type": "string",
      "uniqueItems": true
    },
    "debug-EtJFGyrW": {
      "in": "query",
      "name": "debug",
      "type": "boolean",
      "uniqueItems": true
    },
    "fieldManager-7c6nTn1T": {
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
      "in": "query",
      "name": "fieldManager",
      "type": "string",
      "uniqueItems": true
    },
    "fieldManager-Qy4HdaTW": {
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
      "in": "query",
      "name": "fieldManager",
      "type": "string",
      "uniqueItems": true
    },
    "fieldSelector-xIcQKXFG": {
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "in": "query",
      "name": "fieldSelector",
      "type": "string",
      "uniqueItems": true
    },
    "follow-VM_libi3": {
      "in": "query",
      "name": "follow",
      "type": "boolean",
      "uniqueItems": true
    },
    "force-tOGGb0Yi": {
      "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
      "in": "query",
      "name": "force",
      "type": "boolean",
      "uniqueItems": true
    },
    "gracePeriodSeconds--K5HaBOS": {
      "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
      "in": "query",
      "name": "gracePeriodSeconds",
      "type": "integer",
      "uniqueItems": true
    },
    "insecureSkipTLSVerifyBackend-uV3ublYN": {
      "in": "query",
      "name": "insecureSkipTLSVerifyBackend",
      "type": "boolean",
      "uniqueItems": true
    },
    "labelSelector-5Zw57w4C": {
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "in": "query",
      "name": "labelSelector",
      "type": "string",
      "uniqueItems": true
    },
    "limit-1NfNmdNH": {
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "in": "query",
      "name": "limit",
      "type": "integer",
      "uniqueItems": true
    },
    "limitBytes-2y5MXXAf": {
      "in": "query",
      "name": "limitBytes",
      "type": "integer",
      "uniqueItems": true
    },
    "namespace-vgWSWtn3": {
      "description": "object name and auth scope, such as for teams and projects",
      "in": "path",
      "name": "namespace",
      "required": true,
      "type": "string",
      "uniqueItems": true
    },
    "options-wZwpYqqU": {
      "in": "query",
      "name": "options",
      "type": "string",
      "uniqueItems": true
    },
    "orphanDependents-uRB25kX5": {
      "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
      "in": "query",
      "name": "orphanDependents",
      "type": "boolean",
      "uniqueItems": true
    },
    "pretty-nN7o5FEq": {
      "description": "If 'true', then the output is pretty printed.",
      "in": "query",
      "name": "pretty",
      "type": "string",
      "uniqueItems": true
    },
    "previous-AEFjzUgM": {
      "in": "query",
      "name": "previous",
      "type": "boolean",
      "uniqueItems": true
    },
    "propagationPolicy-6jk3prlO": {
      "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      "in": "query",
      "name": "propagationPolicy",
      "type": "string",
      "uniqueItems": true
    },
    "resourceVersion-5WAnf1kx": {
      "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
      "in": "query",
      "name": "resourceVersion",
      "type": "string",
      "uniqueItems": true
    },
    "resourceVersionMatch-t8XhRHeC": {
      "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
      "in": "query",
      "name": "resourceVersionMatch",
      "type": "string",
      "uniqueItems": true
    },
    "sendInitialEvents-rLXlEK_k": {
      "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
      "in": "query",
      "name": "sendInitialEvents",
      "type": "boolean",
      "uniqueItems": true
    },
    "sinceSeconds-ElPLiXDH": {
      "in": "query",
      "name": "sinceSeconds",
      "type": "integer",
      "uniqueItems": true
    },
    "tailLines-IUlNmndG": {
      "in": "query",
      "name": "tailLines",
      "type": "integer",
      "uniqueItems": true
    },
    "timeoutSeconds-yvYezaOC": {
      "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
      "in": "query",
      "name": "timeoutSeconds",
      "type": "integer",
      "uniqueItems": true
    },
    "timestamps-PiWwxWJa": {
      "in": "query",
      "name": "timestamps",
      "type": "boolean",
      "uniqueItems": true
    },
    "watch-XNNPZGbK": {
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "in": "query",
      "name": "watch",
      "type": "boolean",
      "uniqueItems": true
    },
    "webMode-bwFb_48f": {
      "in": "query",
      "name": "webMode",
      "type": "boolean",
      "uniqueItems": true
    }
  },
  "paths": {
    "/apis/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available API versions",
        "operationId": "getAPIVersions",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apis"
        ]
      }
    },
    "/apis/management.loft.sh/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getManagementLoftShAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh"
        ]
      }
    },
    "/apis/management.loft.sh/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "description": "get available resources",
        "operationId": "getManagementLoftShV1APIResources",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ]
      }
    },
    "/apis/management.loft.sh/v1/agentauditevents": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an AgentAuditEvent",
        "operationId": "createManagementLoftShV1AgentAuditEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEvent"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEvent"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEvent"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AgentAuditEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "AgentAuditEvent",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/announcements": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Announcement",
        "operationId": "listManagementLoftShV1Announcement",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AnnouncementList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Announcement",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/apps": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of App",
        "operationId": "deleteManagementLoftShV1CollectionApp",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind App",
        "operationId": "listManagementLoftShV1App",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AppList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an App",
        "operationId": "createManagementLoftShV1App",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/apps/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an App",
        "operationId": "deleteManagementLoftShV1App",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified App",
        "operationId": "readManagementLoftShV1App",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the App",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified App",
        "operationId": "patchManagementLoftShV1App",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified App",
        "operationId": "replaceManagementLoftShV1App",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/apps/{name}/credentials": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read credentials of the specified App",
        "operationId": "readManagementLoftShV1AppCredentials",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.AppCredentials"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "AppCredentials",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the AppCredentials",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/backups": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Backup",
        "operationId": "createManagementLoftShV1Backup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Backup"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Backup"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Backup"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Backup"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Backup",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/backups/{name}/apply": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the BackupApply",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create apply of a Backup",
        "operationId": "createManagementLoftShV1BackupApply",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApply"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApply"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApply"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.BackupApply"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "BackupApply",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusteraccesses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterAccess",
        "operationId": "deleteManagementLoftShV1CollectionClusterAccess",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterAccess",
        "operationId": "listManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterAccess",
        "operationId": "createManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusteraccesses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterAccess",
        "operationId": "deleteManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterAccess",
        "operationId": "readManagementLoftShV1ClusterAccess",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterAccess",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterAccess",
        "operationId": "patchManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterAccess",
        "operationId": "replaceManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusterconnect": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterConnect",
        "operationId": "createManagementLoftShV1ClusterConnect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnect"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnect"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnect"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterConnect"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterConnect",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusterroletemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRoleTemplate",
        "operationId": "deleteManagementLoftShV1CollectionClusterRoleTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRoleTemplate",
        "operationId": "listManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRoleTemplate",
        "operationId": "createManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusterroletemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRoleTemplate",
        "operationId": "deleteManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRoleTemplate",
        "operationId": "readManagementLoftShV1ClusterRoleTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterRoleTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRoleTemplate",
        "operationId": "patchManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRoleTemplate",
        "operationId": "replaceManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Cluster",
        "operationId": "deleteManagementLoftShV1CollectionCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Cluster",
        "operationId": "listManagementLoftShV1Cluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Cluster",
        "operationId": "createManagementLoftShV1Cluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Cluster",
        "operationId": "deleteManagementLoftShV1Cluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Cluster",
        "operationId": "readManagementLoftShV1Cluster",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Cluster",
        "operationId": "patchManagementLoftShV1Cluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Cluster",
        "operationId": "replaceManagementLoftShV1Cluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/accesskey": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read accesskey of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterAccesskey",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccessKey",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterAccessKey",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/clusters/{name}/agentconfig": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read agentconfig of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterAgentconfig",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterAgentConfig"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAgentConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterAgentConfig",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/clusters/{name}/charts": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read charts of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterCharts",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterCharts"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterCharts",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterCharts",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create charts of a Cluster",
        "operationId": "createManagementLoftShV1ClusterCharts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterCharts"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterCharts"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterCharts"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterCharts"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterCharts",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/domain": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read domain of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterDomain",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterDomain"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterDomain",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterDomain",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create domain of a Cluster",
        "operationId": "createManagementLoftShV1ClusterDomain",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterDomain"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterDomain"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterDomain"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterDomain"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterDomain",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/memberaccess": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read memberaccess of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterMemberaccess",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMemberAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterMemberAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterMemberAccess",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/clusters/{name}/members": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read members of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterMembers",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterMembers"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterMembers",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterMembers",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/clusters/{name}/reset": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ClusterReset",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create reset of a Cluster",
        "operationId": "createManagementLoftShV1ClusterReset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterReset"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterReset"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterReset"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterReset"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterReset",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/virtualclusterdefaults": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read virtualclusterdefaults of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterVirtualclusterdefaults",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ClusterVirtualClusterDefaults"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterVirtualClusterDefaults",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterVirtualClusterDefaults",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/configs": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Config",
        "operationId": "createManagementLoftShV1Config",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Config"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Config"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Config"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Config"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/configs/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Config",
        "operationId": "readManagementLoftShV1Config",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Config"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Config",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/devpodworkspaceinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DevPodWorkspaceInstance",
        "operationId": "listManagementLoftShV1DevPodWorkspaceInstanceForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/devpodworkspacetemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of DevPodWorkspaceTemplate",
        "operationId": "deleteManagementLoftShV1CollectionDevPodWorkspaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DevPodWorkspaceTemplate",
        "operationId": "listManagementLoftShV1DevPodWorkspaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a DevPodWorkspaceTemplate",
        "operationId": "createManagementLoftShV1DevPodWorkspaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/devpodworkspacetemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a DevPodWorkspaceTemplate",
        "operationId": "deleteManagementLoftShV1DevPodWorkspaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified DevPodWorkspaceTemplate",
        "operationId": "readManagementLoftShV1DevPodWorkspaceTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodWorkspaceTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified DevPodWorkspaceTemplate",
        "operationId": "patchManagementLoftShV1DevPodWorkspaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified DevPodWorkspaceTemplate",
        "operationId": "replaceManagementLoftShV1DevPodWorkspaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/directclusterendpointtokens": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a DirectClusterEndpointToken",
        "operationId": "createManagementLoftShV1DirectClusterEndpointToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DirectClusterEndpointToken",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Event",
        "operationId": "listManagementLoftShV1Event",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.EventList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Event",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/features": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Feature",
        "operationId": "listManagementLoftShV1Feature",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.FeatureList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/features/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Feature",
        "operationId": "readManagementLoftShV1Feature",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Feature",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/features/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Feature",
        "operationId": "readManagementLoftShV1FeatureStatus",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Feature",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Feature",
        "operationId": "patchManagementLoftShV1FeatureStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Feature",
        "operationId": "replaceManagementLoftShV1FeatureStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Feature"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/ingressauthtokens": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an IngressAuthToken",
        "operationId": "createManagementLoftShV1IngressAuthToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthToken"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthToken"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthToken"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.IngressAuthToken"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "IngressAuthToken",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/kiosk/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Kiosk",
        "operationId": "readManagementLoftShV1Kiosk",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Kiosk"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Kiosk",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Kiosk",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/licenses/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified License",
        "operationId": "readManagementLoftShV1License",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.License"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "License",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the License",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/licenses/{name}/request": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the LicenseRequest",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create request of a License",
        "operationId": "createManagementLoftShV1LicenseRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequest"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequest"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseRequest"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "LicenseRequest",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/licensetokens": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LicenseToken",
        "operationId": "createManagementLoftShV1LicenseToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseToken"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseToken"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseToken"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LicenseToken"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "LicenseToken",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/loftupgrades": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LoftUpgrade",
        "operationId": "createManagementLoftShV1LoftUpgrade",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgrade"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgrade"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgrade"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.LoftUpgrade"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "LoftUpgrade",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of DevPodWorkspaceInstance",
        "operationId": "deleteManagementLoftShV1CollectionNamespacedDevPodWorkspaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DevPodWorkspaceInstance",
        "operationId": "listManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a DevPodWorkspaceInstance",
        "operationId": "createManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a DevPodWorkspaceInstance",
        "operationId": "deleteManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified DevPodWorkspaceInstance",
        "operationId": "readManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodWorkspaceInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified DevPodWorkspaceInstance",
        "operationId": "patchManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified DevPodWorkspaceInstance",
        "operationId": "replaceManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}/delete": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "connect GET requests to delete of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1GetNamespacedDevPodWorkspaceInstanceDelete",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodDeleteOptions",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodDeleteOptions",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/options-wZwpYqqU"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "connect POST requests to delete of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1PostNamespacedDevPodWorkspaceInstanceDelete",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodDeleteOptions",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}/getstatus": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "connect GET requests to getstatus of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1GetNamespacedDevPodWorkspaceInstanceGetstatus",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodStatusOptions",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodStatusOptions",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/options-wZwpYqqU"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "connect POST requests to getstatus of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1PostNamespacedDevPodWorkspaceInstanceGetstatus",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodStatusOptions",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}/ssh": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "connect GET requests to ssh of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1GetNamespacedDevPodWorkspaceInstanceSsh",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodSshOptions",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodSshOptions",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/options-wZwpYqqU"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "connect POST requests to ssh of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1PostNamespacedDevPodWorkspaceInstanceSsh",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodSshOptions",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}/state": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read state of the specified DevPodWorkspaceInstance",
        "operationId": "readManagementLoftShV1NamespacedDevPodWorkspaceInstanceState",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceState"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstanceState",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodWorkspaceInstanceState",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create state of a DevPodWorkspaceInstance",
        "operationId": "createManagementLoftShV1NamespacedDevPodWorkspaceInstanceState",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceState"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceState"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceState"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.DevPodWorkspaceInstanceState"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstanceState",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}/stop": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "connect GET requests to stop of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1GetNamespacedDevPodWorkspaceInstanceStop",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodStopOptions",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the DevPodStopOptions",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/options-wZwpYqqU"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "connect POST requests to stop of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1PostNamespacedDevPodWorkspaceInstanceStop",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodStopOptions",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/devpodworkspaceinstances/{name}/up": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "connect GET requests to up of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1GetNamespacedDevPodWorkspaceInstanceUp",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodUpOptions",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/debug-EtJFGyrW"
        },
        {
          "description": "name of the DevPodUpOptions",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/options-wZwpYqqU"
        },
        {
          "$ref": "#/parameters/webMode-bwFb_48f"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "connect POST requests to up of DevPodWorkspaceInstance",
        "operationId": "connectManagementLoftShV1PostNamespacedDevPodWorkspaceInstanceUp",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodUpOptions",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/projectsecrets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ProjectSecret",
        "operationId": "deleteManagementLoftShV1CollectionNamespacedProjectSecret",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ProjectSecret",
        "operationId": "listManagementLoftShV1NamespacedProjectSecret",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ProjectSecret",
        "operationId": "createManagementLoftShV1NamespacedProjectSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/projectsecrets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ProjectSecret",
        "operationId": "deleteManagementLoftShV1NamespacedProjectSecret",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ProjectSecret",
        "operationId": "readManagementLoftShV1NamespacedProjectSecret",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ProjectSecret",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ProjectSecret",
        "operationId": "patchManagementLoftShV1NamespacedProjectSecret",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ProjectSecret",
        "operationId": "replaceManagementLoftShV1NamespacedProjectSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/sharedsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind SharedSecret",
        "operationId": "listManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SharedSecret",
        "operationId": "createManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/sharedsecrets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SharedSecret",
        "operationId": "deleteManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SharedSecret",
        "operationId": "readManagementLoftShV1NamespacedSharedSecret",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SharedSecret",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SharedSecret",
        "operationId": "patchManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SharedSecret",
        "operationId": "replaceManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/spaceinstances": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of SpaceInstance",
        "operationId": "deleteManagementLoftShV1CollectionNamespacedSpaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind SpaceInstance",
        "operationId": "listManagementLoftShV1NamespacedSpaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SpaceInstance",
        "operationId": "createManagementLoftShV1NamespacedSpaceInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/spaceinstances/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SpaceInstance",
        "operationId": "deleteManagementLoftShV1NamespacedSpaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SpaceInstance",
        "operationId": "readManagementLoftShV1NamespacedSpaceInstance",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SpaceInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SpaceInstance",
        "operationId": "patchManagementLoftShV1NamespacedSpaceInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SpaceInstance",
        "operationId": "replaceManagementLoftShV1NamespacedSpaceInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/virtualclusterinstances": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VirtualClusterInstance",
        "operationId": "deleteManagementLoftShV1CollectionNamespacedVirtualClusterInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VirtualClusterInstance",
        "operationId": "listManagementLoftShV1NamespacedVirtualClusterInstance",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a VirtualClusterInstance",
        "operationId": "createManagementLoftShV1NamespacedVirtualClusterInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/virtualclusterinstances/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a VirtualClusterInstance",
        "operationId": "deleteManagementLoftShV1NamespacedVirtualClusterInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified VirtualClusterInstance",
        "operationId": "readManagementLoftShV1NamespacedVirtualClusterInstance",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the VirtualClusterInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified VirtualClusterInstance",
        "operationId": "patchManagementLoftShV1NamespacedVirtualClusterInstance",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified VirtualClusterInstance",
        "operationId": "replaceManagementLoftShV1NamespacedVirtualClusterInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/virtualclusterinstances/{name}/kubeconfig": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the VirtualClusterInstanceKubeConfig",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create kubeconfig of a VirtualClusterInstance",
        "operationId": "createManagementLoftShV1NamespacedVirtualClusterInstanceKubeconfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfig"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceKubeConfig"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceKubeConfig",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/virtualclusterinstances/{name}/log": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read log of the specified VirtualClusterInstance",
        "operationId": "readManagementLoftShV1NamespacedVirtualClusterInstanceLog",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceLog"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceLog",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/container-C23hHG_w"
        },
        {
          "$ref": "#/parameters/follow-VM_libi3"
        },
        {
          "$ref": "#/parameters/insecureSkipTLSVerifyBackend-uV3ublYN"
        },
        {
          "$ref": "#/parameters/limitBytes-2y5MXXAf"
        },
        {
          "description": "name of the VirtualClusterInstanceLog",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/previous-AEFjzUgM"
        },
        {
          "$ref": "#/parameters/sinceSeconds-ElPLiXDH"
        },
        {
          "$ref": "#/parameters/tailLines-IUlNmndG"
        },
        {
          "$ref": "#/parameters/timestamps-PiWwxWJa"
        }
      ]
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/virtualclusterinstances/{name}/workloadkubeconfig": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read workloadkubeconfig of the specified VirtualClusterInstance",
        "operationId": "readManagementLoftShV1NamespacedVirtualClusterInstanceWorkloadkubeconfig",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceWorkloadKubeConfig"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceWorkloadKubeConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the VirtualClusterInstanceWorkloadKubeConfig",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create workloadkubeconfig of a VirtualClusterInstance",
        "operationId": "createManagementLoftShV1NamespacedVirtualClusterInstanceWorkloadkubeconfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceWorkloadKubeConfig"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceWorkloadKubeConfig"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceWorkloadKubeConfig"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceWorkloadKubeConfig"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstanceWorkloadKubeConfig",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/ownedaccesskeys": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an OwnedAccessKey",
        "operationId": "createManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/ownedaccesskeys/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an OwnedAccessKey",
        "operationId": "deleteManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified OwnedAccessKey",
        "operationId": "readManagementLoftShV1OwnedAccessKey",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the OwnedAccessKey",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified OwnedAccessKey",
        "operationId": "patchManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified OwnedAccessKey",
        "operationId": "replaceManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/policyviolations": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind PolicyViolation",
        "operationId": "listManagementLoftShV1PolicyViolation",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.PolicyViolationList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "PolicyViolation",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/projects": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Project",
        "operationId": "deleteManagementLoftShV1CollectionProject",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Project",
        "operationId": "listManagementLoftShV1Project",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Project",
        "operationId": "createManagementLoftShV1Project",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Project",
        "operationId": "deleteManagementLoftShV1Project",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Project",
        "operationId": "readManagementLoftShV1Project",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Project",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Project",
        "operationId": "patchManagementLoftShV1Project",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Project",
        "operationId": "replaceManagementLoftShV1Project",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/chartinfo": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ProjectChartInfo",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create chartinfo of a Project",
        "operationId": "createManagementLoftShV1ProjectChartinfo",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfo"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfo"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfo"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectChartInfo"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectChartInfo",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/charts": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read charts of the specified Project",
        "operationId": "readManagementLoftShV1ProjectCharts",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectCharts"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectCharts",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ProjectCharts",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/projects/{name}/clusters": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read clusters of the specified Project",
        "operationId": "readManagementLoftShV1ProjectClusters",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectClusters"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectClusters",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ProjectClusters",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/projects/{name}/importspace": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ProjectImportSpace",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create importspace of a Project",
        "operationId": "createManagementLoftShV1ProjectImportspace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpace"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpace"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpace"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportSpace"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectImportSpace",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/importvirtualcluster": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ProjectImportVirtualCluster",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create importvirtualcluster of a Project",
        "operationId": "createManagementLoftShV1ProjectImportvirtualcluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualCluster"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualCluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectImportVirtualCluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectImportVirtualCluster",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/members": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read members of the specified Project",
        "operationId": "readManagementLoftShV1ProjectMembers",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMembers"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectMembers",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ProjectMembers",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/projects/{name}/migratespaceinstance": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ProjectMigrateSpaceInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create migratespaceinstance of a Project",
        "operationId": "createManagementLoftShV1ProjectMigratespaceinstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstance"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstance"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateSpaceInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectMigrateSpaceInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/migratevirtualclusterinstance": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ProjectMigrateVirtualClusterInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create migratevirtualclusterinstance of a Project",
        "operationId": "createManagementLoftShV1ProjectMigratevirtualclusterinstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstance"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstance"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstance"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectMigrateVirtualClusterInstance"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectMigrateVirtualClusterInstance",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Project",
        "operationId": "readManagementLoftShV1ProjectStatus",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Project",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Project",
        "operationId": "patchManagementLoftShV1ProjectStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Project",
        "operationId": "replaceManagementLoftShV1ProjectStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Project"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/projects/{name}/templates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read templates of the specified Project",
        "operationId": "readManagementLoftShV1ProjectTemplates",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectTemplates"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectTemplates",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ProjectTemplates",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/projectsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ProjectSecret",
        "operationId": "listManagementLoftShV1ProjectSecretForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ProjectSecretList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/redirecttokens": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RedirectToken",
        "operationId": "createManagementLoftShV1RedirectToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectToken"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectToken"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectToken"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RedirectToken"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "RedirectToken",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/resetaccesskeys": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ResetAccessKey",
        "operationId": "createManagementLoftShV1ResetAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKey"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKey"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.ResetAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ResetAccessKey",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/runners": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Runner",
        "operationId": "deleteManagementLoftShV1CollectionRunner",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Runner",
        "operationId": "listManagementLoftShV1Runner",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Runner",
        "operationId": "createManagementLoftShV1Runner",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/runners/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Runner",
        "operationId": "deleteManagementLoftShV1Runner",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Runner",
        "operationId": "readManagementLoftShV1Runner",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Runner",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Runner",
        "operationId": "patchManagementLoftShV1Runner",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Runner",
        "operationId": "replaceManagementLoftShV1Runner",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/runners/{name}/accesskey": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read accesskey of the specified Runner",
        "operationId": "readManagementLoftShV1RunnerAccesskey",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "RunnerAccessKey",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the RunnerAccessKey",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/runners/{name}/config": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read config of the specified Runner",
        "operationId": "readManagementLoftShV1RunnerConfig",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.RunnerConfig"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "RunnerConfig",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the RunnerConfig",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/runners/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Runner",
        "operationId": "readManagementLoftShV1RunnerStatus",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Runner",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Runner",
        "operationId": "patchManagementLoftShV1RunnerStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Runner",
        "operationId": "replaceManagementLoftShV1RunnerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Runner"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/selfsubjectaccessreviews": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SelfSubjectAccessReview",
        "operationId": "createManagementLoftShV1SelfSubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/selves": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Self",
        "operationId": "createManagementLoftShV1Self",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Self"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Self"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Self"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Self"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Self",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/selves/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Self",
        "operationId": "readManagementLoftShV1Self",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Self"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Self",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Self",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/sharedsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind SharedSecret",
        "operationId": "listManagementLoftShV1SharedSecretForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SharedSecretList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/spaceconstraints": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of SpaceConstraint",
        "operationId": "deleteManagementLoftShV1CollectionSpaceConstraint",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind SpaceConstraint",
        "operationId": "listManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraintList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SpaceConstraint",
        "operationId": "createManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/spaceconstraints/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SpaceConstraint",
        "operationId": "deleteManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SpaceConstraint",
        "operationId": "readManagementLoftShV1SpaceConstraint",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SpaceConstraint",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SpaceConstraint",
        "operationId": "patchManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SpaceConstraint",
        "operationId": "replaceManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/spaceinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind SpaceInstance",
        "operationId": "listManagementLoftShV1SpaceInstanceForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceInstanceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/spacetemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of SpaceTemplate",
        "operationId": "deleteManagementLoftShV1CollectionSpaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind SpaceTemplate",
        "operationId": "listManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SpaceTemplate",
        "operationId": "createManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/spacetemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SpaceTemplate",
        "operationId": "deleteManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SpaceTemplate",
        "operationId": "readManagementLoftShV1SpaceTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SpaceTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SpaceTemplate",
        "operationId": "patchManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SpaceTemplate",
        "operationId": "replaceManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/subjectaccessreviews": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/fieldManager-Qy4HdaTW"
        },
        {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "in": "query",
          "name": "fieldValidation",
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SubjectAccessReview",
        "operationId": "createManagementLoftShV1SubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReview"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReview"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReview"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.SubjectAccessReview"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/tasks": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Task",
        "operationId": "deleteManagementLoftShV1CollectionTask",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Task",
        "operationId": "listManagementLoftShV1Task",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Task",
        "operationId": "createManagementLoftShV1Task",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/tasks/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Task",
        "operationId": "deleteManagementLoftShV1Task",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Task",
        "operationId": "readManagementLoftShV1Task",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Task",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Task",
        "operationId": "patchManagementLoftShV1Task",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Task",
        "operationId": "replaceManagementLoftShV1Task",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/tasks/{name}/log": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read log of the specified Task",
        "operationId": "readManagementLoftShV1TaskLog",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TaskLog"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "TaskLog",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/follow-VM_libi3"
        },
        {
          "$ref": "#/parameters/insecureSkipTLSVerifyBackend-uV3ublYN"
        },
        {
          "$ref": "#/parameters/limitBytes-2y5MXXAf"
        },
        {
          "description": "name of the TaskLog",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/previous-AEFjzUgM"
        },
        {
          "$ref": "#/parameters/sinceSeconds-ElPLiXDH"
        },
        {
          "$ref": "#/parameters/tailLines-IUlNmndG"
        },
        {
          "$ref": "#/parameters/timestamps-PiWwxWJa"
        }
      ]
    },
    "/apis/management.loft.sh/v1/teams": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Team",
        "operationId": "deleteManagementLoftShV1CollectionTeam",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Team",
        "operationId": "listManagementLoftShV1Team",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Team",
        "operationId": "createManagementLoftShV1Team",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/teams/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Team",
        "operationId": "deleteManagementLoftShV1Team",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Team",
        "operationId": "readManagementLoftShV1Team",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Team",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Team",
        "operationId": "patchManagementLoftShV1Team",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Team",
        "operationId": "replaceManagementLoftShV1Team",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/teams/{name}/accesskeys": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read accesskeys of the specified Team",
        "operationId": "readManagementLoftShV1TeamAccesskeys",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamAccessKeys"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "TeamAccessKeys",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the TeamAccessKeys",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/teams/{name}/clusters": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read clusters of the specified Team",
        "operationId": "readManagementLoftShV1TeamClusters",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.TeamClusters"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "TeamClusters",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the TeamClusters",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/users": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of User",
        "operationId": "deleteManagementLoftShV1CollectionUser",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind User",
        "operationId": "listManagementLoftShV1User",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an User",
        "operationId": "createManagementLoftShV1User",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/users/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an User",
        "operationId": "deleteManagementLoftShV1User",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified User",
        "operationId": "readManagementLoftShV1User",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the User",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified User",
        "operationId": "patchManagementLoftShV1User",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified User",
        "operationId": "replaceManagementLoftShV1User",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/users/{name}/accesskeys": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read accesskeys of the specified User",
        "operationId": "readManagementLoftShV1UserAccesskeys",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserAccessKeys"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserAccessKeys",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserAccessKeys",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/users/{name}/clusters": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read clusters of the specified User",
        "operationId": "readManagementLoftShV1UserClusters",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserClusters"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserClusters",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserClusters",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/users/{name}/permissions": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read permissions of the specified User",
        "operationId": "readManagementLoftShV1UserPermissions",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserPermissions"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserPermissions",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserPermissions",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/management.loft.sh/v1/users/{name}/profile": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read profile of the specified User",
        "operationId": "readManagementLoftShV1UserProfile",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserProfile"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserProfile",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserProfile",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create profile of an User",
        "operationId": "createManagementLoftShV1UserProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserProfile"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserProfile"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserProfile"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.UserProfile"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserProfile",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/virtualclusterinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VirtualClusterInstance",
        "operationId": "listManagementLoftShV1VirtualClusterInstanceForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterInstanceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/virtualclustertemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VirtualClusterTemplate",
        "operationId": "deleteManagementLoftShV1CollectionVirtualClusterTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VirtualClusterTemplate",
        "operationId": "listManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a VirtualClusterTemplate",
        "operationId": "createManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/virtualclustertemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a VirtualClusterTemplate",
        "operationId": "deleteManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified VirtualClusterTemplate",
        "operationId": "readManagementLoftShV1VirtualClusterTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the VirtualClusterTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified VirtualClusterTemplate",
        "operationId": "patchManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified VirtualClusterTemplate",
        "operationId": "replaceManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/watch/apps": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of App. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1AppList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/apps/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind App. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1App",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the App",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/clusteraccesses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of ClusterAccess. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1ClusterAccessList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/clusteraccesses/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind ClusterAccess. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1ClusterAccess",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the ClusterAccess",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/clusterroletemplates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of ClusterRoleTemplate. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1ClusterRoleTemplateList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/clusterroletemplates/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind ClusterRoleTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1ClusterRoleTemplate",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the ClusterRoleTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/clusters": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of Cluster. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1ClusterList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/clusters/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind Cluster. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1Cluster",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/devpodworkspaceinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of DevPodWorkspaceInstance. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1DevPodWorkspaceInstanceListForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/devpodworkspacetemplates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of DevPodWorkspaceTemplate. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1DevPodWorkspaceTemplateList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/devpodworkspacetemplates/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind DevPodWorkspaceTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1DevPodWorkspaceTemplate",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the DevPodWorkspaceTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/devpodworkspaceinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of DevPodWorkspaceInstance. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1NamespacedDevPodWorkspaceInstanceList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/devpodworkspaceinstances/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind DevPodWorkspaceInstance. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1NamespacedDevPodWorkspaceInstance",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DevPodWorkspaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the DevPodWorkspaceInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/projectsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of ProjectSecret. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1NamespacedProjectSecretList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/projectsecrets/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind ProjectSecret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1NamespacedProjectSecret",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the ProjectSecret",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/spaceinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of SpaceInstance. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1NamespacedSpaceInstanceList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/spaceinstances/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind SpaceInstance. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1NamespacedSpaceInstance",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the SpaceInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/virtualclusterinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of VirtualClusterInstance. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1NamespacedVirtualClusterInstanceList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/namespaces/{namespace}/virtualclusterinstances/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind VirtualClusterInstance. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1NamespacedVirtualClusterInstance",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the VirtualClusterInstance",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/projects": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of Project. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1ProjectList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/projects/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind Project. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1Project",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Project",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the Project",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/projectsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of ProjectSecret. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1ProjectSecretListForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ProjectSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/runners": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of Runner. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1RunnerList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/runners/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind Runner. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1Runner",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Runner",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the Runner",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/spaceconstraints": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of SpaceConstraint. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1SpaceConstraintList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/spaceconstraints/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind SpaceConstraint. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1SpaceConstraint",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the SpaceConstraint",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/spaceinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of SpaceInstance. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1SpaceInstanceListForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/spacetemplates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of SpaceTemplate. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1SpaceTemplateList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/spacetemplates/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind SpaceTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1SpaceTemplate",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the SpaceTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/tasks": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of Task. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1TaskList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/tasks/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind Task. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1Task",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the Task",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/teams": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of Team. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1TeamList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/teams/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind Team. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1Team",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the Team",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/users": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of User. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1UserList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/users/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind User. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1User",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the User",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/virtualclusterinstances": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of VirtualClusterInstance. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1VirtualClusterInstanceListForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterInstance",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/virtualclustertemplates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch individual changes to a list of VirtualClusterTemplate. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchManagementLoftShV1VirtualClusterTemplateList",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/management.loft.sh/v1/watch/virtualclustertemplates/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "watch changes to an object of kind VirtualClusterTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchManagementLoftShV1VirtualClusterTemplate",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "description": "name of the VirtualClusterTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/virtualcluster.loft.sh/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getVirtualclusterLoftShAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh"
        ]
      }
    },
    "/apis/virtualcluster.loft.sh/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "description": "get available resources",
        "operationId": "getVirtualclusterLoftShV1APIResources",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ]
      }
    },
    "/apis/virtualcluster.loft.sh/v1/helmreleases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind HelmRelease",
        "operationId": "listVirtualclusterLoftShV1HelmReleaseForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/virtualcluster.loft.sh/v1/namespaces/{namespace}/helmreleases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind HelmRelease",
        "operationId": "listVirtualclusterLoftShV1NamespacedHelmRelease",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmReleaseList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/virtualcluster.loft.sh/v1/namespaces/{namespace}/helmreleases/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified HelmRelease",
        "operationId": "readVirtualclusterLoftShV1NamespacedHelmRelease",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v3.pkg.apis.virtualcluster.v1.HelmRelease"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the HelmRelease",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    }
  },
  "swagger": "2.0"
}
