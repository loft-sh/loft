suite: Deployment
templates:
  - deployment.yaml

tests:
  - it: allow double LEADER_ELECTION_ENABLED
    release:
      name: my-release
      namespace: my-namespace
    set:
      replicaCount: 3
      env:
        LEADER_ELECTION_ENABLED: "false"
    asserts:
      - hasDocuments:
          count: 1
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: "LEADER_ELECTION_ENABLED"
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: "LEADER_ELECTION_ENABLED"
            value: "false"
          count: 1

  - it: automatic LEADER_ELECTION_ENABLED
    release:
      name: my-release
      namespace: my-namespace
    set:
      replicaCount: 3
    asserts:
      - hasDocuments:
          count: 1
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: "LEADER_ELECTION_ENABLED"
            value: "true"
          count: 1

  - it: Preferred node anti-affinity is applied by default
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                  - key: eks.amazonaws.com/capacityType
                    operator: NotIn
                    values:
                    - SPOT
                  - key: kubernetes.azure.com/scalesetpriority
                    operator: NotIn
                    values:
                    - spot
                  - key: cloud.google.com/gke-provisioning
                    operator: NotIn
                    values:
                    - spot

  - it: Deployment strategy is applied correctly for Recreate
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.strategy.type
          value: Recreate

  - it: Deployment strategy is applied correctly for RollingUpdate
    set:
      replicaCount: 2
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 1
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 1
  - it: SecurityContext defaults
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.containers[0].securityContext.privileged
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.capabilities.drop[0]
          value: "ALL"
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true

  - it: SecurityContext kyverno strict policies
    set:
      podSecurityContext:
        runAsGroup: 1000
        fsGroup: 1000
        supplementalGroups:
          - 1000
      securityContext:
        allowPrivilegeEscalation: false
        privileged: false
        capabilities:
          drop:
            - ALL
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
    asserts:
      - hasDocuments:
          count: 1
      # container checks
      - equal:
          path: spec.template.spec.containers[0].securityContext.privileged
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.capabilities.drop[0]
          value: "ALL"
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 1000
      # pod checks
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.supplementalGroups[0]
          value: 1000
  - it: SecurityContext kyverno strict policies (backward compatibility with .enabled)
    set:
      podSecurityContext:
        runAsGroup: 1000
        fsGroup: 1000
        supplementalGroups:
          - 1000
      securityContext:
        enabled: true
        allowPrivilegeEscalation: false
        privileged: false
        capabilities:
          drop:
            - ALL
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
    asserts:
      - hasDocuments:
          count: 1
      - notExists:
          path: spec.template.spec.containers[0].securityContext.enabled
  - it: SecurityContext kyverno strict policies (backward compatibility with .enabled=false)
    set:
      podSecurityContext:
        runAsGroup: 1000
        fsGroup: 1000
        supplementalGroups:
          - 1000
      securityContext:
        enabled: false
        allowPrivilegeEscalation: false
        privileged: false
        capabilities:
          drop:
            - ALL
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
    asserts:
      - hasDocuments:
          count: 1
      - notExists:
          path: spec.template.spec.containers[0].securityContext.enabled
          
  - it: Audit Container SecurityContext defaults
    set:
      audit:
        enableSideCar: true
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.containers[1].securityContext.privileged
          value: false
      - equal:
          path: spec.template.spec.containers[1].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[1].securityContext.capabilities.drop[0]
          value: "ALL"
      - equal:
          path: spec.template.spec.containers[1].securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[1].securityContext.runAsUser
          value: 1000
  - it: Audit Container SecurityContext kyverno strict policies
    set:
      audit:
        enableSideCar: true
        securityContext:
          capabilities:
            drop:
              - ALL
          runAsUser: 1000
          runAsGroup: 65533
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.containers[1].securityContext.capabilities.drop[0]
          value: "ALL"
      - equal:
          path: spec.template.spec.containers[1].securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[1].securityContext.runAsGroup
          value: 65533
  - it: Default admin password hash
    set:
      admin:
        password: "my-password"
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.containers[0].env[2]
          value:
            name: "ADMIN_PASSWORD_HASH"
            value: "6fa2288c361becce3e30ba4c41be7d8ba01e3580566f7acc76a7f99994474c46"
  - it: Default admin password hash with envVar reference
    set:
      envValueFrom:
        SAMPLE_ENV_VAR:
          secretKeyRef:
            name: vcluster-secret
            key: admin_password
      admin:
        create: true
        username: admin
        password: $SAMPLE_ENV_VAR
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.containers[0].env[2]
          value:
            name: "ADMIN_PASSWORD_ENV"
            value: "$SAMPLE_ENV_VAR"